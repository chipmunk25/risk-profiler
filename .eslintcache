[{"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\index.js":"1","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\reportWebVitals.js":"2","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\registerServiceWorker.js":"3","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\NextApp.js":"4","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\styles\\vendors\\style.js":"5","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\App\\index.js":"6","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\store\\index.js":"7","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\history\\index.js":"8","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\App\\MainApp.js":"9","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\auth.js":"10","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\sagas\\index.js":"11","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\SignIn\\index.js":"12","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\constants.js":"13","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\index.js":"14","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\sagas\\Auth.js":"15","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\sagas\\people.js":"16","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Header\\index.js":"17","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Sidebar\\index.js":"18","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\SignIn\\login.js":"19","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\common.js":"20","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\Auth.js":"21","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\common.js":"22","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\people.js":"23","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\Settings.js":"24","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\people.js":"25","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\api\\users.js":"26","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\api\\people.js":"27","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Header\\CompanyDetails.js":"28","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\Setting.js":"29","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\ThemeSetting.js":"30","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Sidebar\\SidebarContent.js":"31","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\SignIn\\loginform.js":"32","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\utils\\Auxiliary.js":"33","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\api\\root.js":"34","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Sidebar\\AppsNavigation.js":"35","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Sidebar\\UserProfile.js":"36","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Sidebar\\SidebarLogo.js":"37","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\utils\\CustomScrollbars.js":"38","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\index.js":"39","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Loading\\index.js":"40","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Alert\\notification.js":"41","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Alert\\message.js":"42","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Dashboard\\index.js":"43","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Dashboard\\header.js":"44","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Dashboard\\EcommerceStatus.js":"45","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Dashboard\\BalanceHistory.js":"46","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Dashboard\\dashboardtops.js":"47","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\utils\\DashColor.js":"48","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\AppNotification\\index.js":"49","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\MailNotification\\index.js":"50","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\AppNotification\\data.js":"51","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\AppNotification\\NotificationItem.js":"52","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\MailNotification\\NotificationItem.js":"53","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\MailNotification\\data.js":"54","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Widget\\index.js":"55","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\UserInfo\\index.js":"56","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Customer\\index.js":"57","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Customer\\Create.js":"58","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Customer\\Edit.js":"59","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Modals\\index.js":"60","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\PageContent\\index.js":"61","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Datatable\\index.js":"62","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\PageHeader\\index.js":"63","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Searchbox\\index.js":"64","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\ActionTools\\index.js":"65","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\index.js":"66","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\IndicatorType\\index.js":"67","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\IndicatorDescription\\index.js":"68","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\IndicatorType\\Create.js":"69","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\IndicatorType\\Edit.js":"70","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\IndicatorDescription\\Edit.js":"71","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\IndicatorDescription\\Create.js":"72","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\Indicator\\index.js":"73","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\Indicator\\Create.js":"74","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\Indicator\\Edit.js":"75","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\sagas\\indicator.js":"76","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\indicator.js":"77","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\api\\indicator.js":"78","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\indicator.js":"79","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\Mapping\\index.js":"80","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\Mapping\\Create.js":"81","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\Mapping\\Edit.js":"82","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Profiler\\index.js":"83","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\index.js":"84","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Branch\\index.js":"85","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\ChangePassword\\index.js":"86","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Users\\index.js":"87","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\ResetPassword\\index.js":"88","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\UserProfile\\index.js":"89","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Users\\Create.js":"90","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Branch\\Edit.js":"91","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Branch\\Create.js":"92","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Users\\Edit.js":"93","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\utils\\FindName.js":"94","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Profiler\\ProfileForm.js":"95","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\utils\\CartFunctions.js":"96","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Profiler\\ValueViewer.js":"97","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\status.js":"98","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\sagas\\status.js":"99","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\api\\status.js":"100","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\status.js":"101","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Statuses\\index.js":"102","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Statuses\\Create.js":"103","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Statuses\\Edit.js":"104","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Permissions\\index.js":"105","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Roles\\index.js":"106","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Permissions\\Create.js":"107","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Roles\\Create.js":"108","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Permissions\\Edit.js":"109","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Roles\\Edit.js":"110","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Roles\\Permission.js":"111","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Transfer\\index.js":"112","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Reports\\index.js":"113","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Reports\\Summary\\index.js":"114","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Reports\\PrintPage.js":"115","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\PdfReports\\ReportHeader\\index.js":"116","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Dashboard\\card.js":"117"},{"size":525,"mtime":1614264325406,"results":"118","hashOfConfig":"119"},{"size":362,"mtime":1613408423284,"results":"120","hashOfConfig":"119"},{"size":4495,"mtime":1614264325684,"results":"121","hashOfConfig":"119"},{"size":747,"mtime":1614264325523,"results":"122","hashOfConfig":"119"},{"size":248,"mtime":1614264311721,"results":"123","hashOfConfig":"119"},{"size":1801,"mtime":1614264312422,"results":"124","hashOfConfig":"119"},{"size":888,"mtime":1614264288784,"results":"125","hashOfConfig":"119"},{"size":121,"mtime":1614264287434,"results":"126","hashOfConfig":"119"},{"size":910,"mtime":1614264312418,"results":"127","hashOfConfig":"119"},{"size":4095,"mtime":1615117651205,"results":"128","hashOfConfig":"119"},{"size":342,"mtime":1615104213193,"results":"129","hashOfConfig":"119"},{"size":2649,"mtime":1614264312531,"results":"130","hashOfConfig":"119"},{"size":7129,"mtime":1615238838722,"results":"131","hashOfConfig":"119"},{"size":525,"mtime":1615104148687,"results":"132","hashOfConfig":"119"},{"size":16620,"mtime":1615119733072,"results":"133","hashOfConfig":"119"},{"size":3296,"mtime":1615104692141,"results":"134","hashOfConfig":"119"},{"size":3137,"mtime":1615286872507,"results":"135","hashOfConfig":"119"},{"size":2597,"mtime":1614264312495,"results":"136","hashOfConfig":"119"},{"size":1022,"mtime":1614264312535,"results":"137","hashOfConfig":"119"},{"size":476,"mtime":1614264287233,"results":"138","hashOfConfig":"119"},{"size":6611,"mtime":1615118786954,"results":"139","hashOfConfig":"119"},{"size":1182,"mtime":1614264287503,"results":"140","hashOfConfig":"119"},{"size":1654,"mtime":1615104815445,"results":"141","hashOfConfig":"119"},{"size":1169,"mtime":1614264287500,"results":"142","hashOfConfig":"119"},{"size":886,"mtime":1615104713526,"results":"143","hashOfConfig":"119"},{"size":6150,"mtime":1615118613012,"results":"144","hashOfConfig":"119"},{"size":2461,"mtime":1614264287337,"results":"145","hashOfConfig":"119"},{"size":401,"mtime":1614264312428,"results":"146","hashOfConfig":"119"},{"size":1133,"mtime":1614264287171,"results":"147","hashOfConfig":"119"},{"size":2913,"mtime":1614264287183,"results":"148","hashOfConfig":"119"},{"size":6816,"mtime":1615229763905,"results":"149","hashOfConfig":"119"},{"size":1627,"mtime":1614264312561,"results":"150","hashOfConfig":"119"},{"size":75,"mtime":1614264311848,"results":"151","hashOfConfig":"119"},{"size":540,"mtime":1615285769165,"results":"152","hashOfConfig":"119"},{"size":906,"mtime":1614264312444,"results":"153","hashOfConfig":"119"},{"size":1219,"mtime":1614264312491,"results":"154","hashOfConfig":"119"},{"size":2419,"mtime":1614264312465,"results":"155","hashOfConfig":"119"},{"size":522,"mtime":1614264311861,"results":"156","hashOfConfig":"119"},{"size":1051,"mtime":1615229408454,"results":"157","hashOfConfig":"119"},{"size":376,"mtime":1614264742269,"results":"158","hashOfConfig":"119"},{"size":234,"mtime":1614264742829,"results":"159","hashOfConfig":"119"},{"size":546,"mtime":1614264742802,"results":"160","hashOfConfig":"119"},{"size":3295,"mtime":1615286898646,"results":"161","hashOfConfig":"119"},{"size":8628,"mtime":1615105178879,"results":"162","hashOfConfig":"119"},{"size":901,"mtime":1614264685532,"results":"163","hashOfConfig":"119"},{"size":2059,"mtime":1614264685498,"results":"164","hashOfConfig":"119"},{"size":897,"mtime":1614264685588,"results":"165","hashOfConfig":"119"},{"size":1521,"mtime":1614264311866,"results":"166","hashOfConfig":"119"},{"size":857,"mtime":1614265224462,"results":"167","hashOfConfig":"119"},{"size":841,"mtime":1614265224598,"results":"168","hashOfConfig":"119"},{"size":891,"mtime":1614265224440,"results":"169","hashOfConfig":"119"},{"size":607,"mtime":1614265224419,"results":"170","hashOfConfig":"119"},{"size":1191,"mtime":1614265224549,"results":"171","hashOfConfig":"119"},{"size":984,"mtime":1614265224569,"results":"172","hashOfConfig":"119"},{"size":584,"mtime":1614265252373,"results":"173","hashOfConfig":"119"},{"size":1713,"mtime":1614265252283,"results":"174","hashOfConfig":"119"},{"size":8694,"mtime":1614410544916,"results":"175","hashOfConfig":"119"},{"size":3321,"mtime":1614359033825,"results":"176","hashOfConfig":"119"},{"size":3855,"mtime":1614411097437,"results":"177","hashOfConfig":"119"},{"size":1034,"mtime":1614264742155,"results":"178","hashOfConfig":"119"},{"size":413,"mtime":1614266269992,"results":"179","hashOfConfig":"119"},{"size":420,"mtime":1614264742432,"results":"180","hashOfConfig":"119"},{"size":677,"mtime":1614266270095,"results":"181","hashOfConfig":"119"},{"size":396,"mtime":1614265252460,"results":"182","hashOfConfig":"119"},{"size":1278,"mtime":1614266359272,"results":"183","hashOfConfig":"119"},{"size":819,"mtime":1614353019594,"results":"184","hashOfConfig":"119"},{"size":7285,"mtime":1614325701319,"results":"185","hashOfConfig":"119"},{"size":7260,"mtime":1614347595351,"results":"186","hashOfConfig":"119"},{"size":1294,"mtime":1614267408631,"results":"187","hashOfConfig":"119"},{"size":1448,"mtime":1614267477219,"results":"188","hashOfConfig":"119"},{"size":1502,"mtime":1614344523179,"results":"189","hashOfConfig":"119"},{"size":1322,"mtime":1614344503452,"results":"190","hashOfConfig":"119"},{"size":8314,"mtime":1614349193787,"results":"191","hashOfConfig":"119"},{"size":2360,"mtime":1614349466065,"results":"192","hashOfConfig":"119"},{"size":2805,"mtime":1614349440673,"results":"193","hashOfConfig":"119"},{"size":14023,"mtime":1615272060382,"results":"194","hashOfConfig":"119"},{"size":4713,"mtime":1615238865110,"results":"195","hashOfConfig":"119"},{"size":6243,"mtime":1615238975402,"results":"196","hashOfConfig":"119"},{"size":6250,"mtime":1615239043574,"results":"197","hashOfConfig":"119"},{"size":8918,"mtime":1614410406745,"results":"198","hashOfConfig":"119"},{"size":2876,"mtime":1614354313792,"results":"199","hashOfConfig":"119"},{"size":3509,"mtime":1614356623745,"results":"200","hashOfConfig":"119"},{"size":11053,"mtime":1615271804337,"results":"201","hashOfConfig":"119"},{"size":1084,"mtime":1615122351494,"results":"202","hashOfConfig":"119"},{"size":7443,"mtime":1614358060685,"results":"203","hashOfConfig":"119"},{"size":2711,"mtime":1614358060696,"results":"204","hashOfConfig":"119"},{"size":8698,"mtime":1614358060722,"results":"205","hashOfConfig":"119"},{"size":2044,"mtime":1614358060701,"results":"206","hashOfConfig":"119"},{"size":3034,"mtime":1614358060705,"results":"207","hashOfConfig":"119"},{"size":4051,"mtime":1614358060709,"results":"208","hashOfConfig":"119"},{"size":2498,"mtime":1614358060683,"results":"209","hashOfConfig":"119"},{"size":2194,"mtime":1614358060677,"results":"210","hashOfConfig":"119"},{"size":4710,"mtime":1614358060712,"results":"211","hashOfConfig":"119"},{"size":131,"mtime":1614410406745,"results":"212","hashOfConfig":"119"},{"size":1050,"mtime":1614871457474,"results":"213","hashOfConfig":"119"},{"size":1261,"mtime":1614934184835,"results":"214","hashOfConfig":"119"},{"size":505,"mtime":1615129465917,"results":"215","hashOfConfig":"119"},{"size":1251,"mtime":1615104088244,"results":"216","hashOfConfig":"119"},{"size":3271,"mtime":1615106129084,"results":"217","hashOfConfig":"119"},{"size":1050,"mtime":1615103556257,"results":"218","hashOfConfig":"119"},{"size":845,"mtime":1615103928985,"results":"219","hashOfConfig":"119"},{"size":7548,"mtime":1615111738205,"results":"220","hashOfConfig":"119"},{"size":2392,"mtime":1615111684634,"results":"221","hashOfConfig":"119"},{"size":2737,"mtime":1615111684634,"results":"222","hashOfConfig":"119"},{"size":7614,"mtime":1615117366362,"results":"223","hashOfConfig":"119"},{"size":8575,"mtime":1615117366433,"results":"224","hashOfConfig":"119"},{"size":2078,"mtime":1615117366337,"results":"225","hashOfConfig":"119"},{"size":2081,"mtime":1615117366394,"results":"226","hashOfConfig":"119"},{"size":2433,"mtime":1615117366348,"results":"227","hashOfConfig":"119"},{"size":1375,"mtime":1615117366405,"results":"228","hashOfConfig":"119"},{"size":1690,"mtime":1615117366414,"results":"229","hashOfConfig":"119"},{"size":577,"mtime":1615122406403,"results":"230","hashOfConfig":"119"},{"size":423,"mtime":1615229340170,"results":"231","hashOfConfig":"119"},{"size":3388,"mtime":1615283490681,"results":"232","hashOfConfig":"119"},{"size":2965,"mtime":1615283525571,"results":"233","hashOfConfig":"119"},{"size":2004,"mtime":1615285654966,"results":"234","hashOfConfig":"119"},{"size":896,"mtime":1615286942212,"results":"235","hashOfConfig":"119"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},"twdn1j",{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"238"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"238"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"238"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"238"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"238"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"238"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"238"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"238"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"238"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"238"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"238"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"238"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"238"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"238"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"238"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"238"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"238"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"238"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"238"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"238"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"238"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"238"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"238"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"238"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"238"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"238"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"238"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"238"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"238"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"238"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"238"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"238"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"238"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"238"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"238"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"502","messages":"503","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\index.js",[],["506","507"],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\reportWebVitals.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\registerServiceWorker.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\NextApp.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\styles\\vendors\\style.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\App\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\store\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\history\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\App\\MainApp.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\auth.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\sagas\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\SignIn\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\constants.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\sagas\\Auth.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\sagas\\people.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Header\\index.js",["508"],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Sidebar\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\SignIn\\login.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\common.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\Auth.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\common.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\people.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\Settings.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\people.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\api\\users.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\api\\people.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Header\\CompanyDetails.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\Setting.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\ThemeSetting.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Sidebar\\SidebarContent.js",["509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540"],"import React, { useEffect } from \"react\";\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Menu } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n    DashboardOutlined, UserOutlined, DiffOutlined, DeploymentUnitOutlined,\r\n    AuditOutlined, ApartmentOutlined, AppstoreAddOutlined, ContainerOutlined, BankOutlined, ShopOutlined,\r\n    ReconciliationOutlined, TrademarkOutlined, UsergroupAddOutlined,\r\n    SettingOutlined, LineChartOutlined, SwapOutlined, UngroupOutlined, SplitCellsOutlined, ScheduleOutlined,\r\n    ClockCircleOutlined, WeiboSquareOutlined, GoldOutlined, BookOutlined,\r\n    DotChartOutlined, PoundOutlined, AccountBookOutlined, BarChartOutlined, RiseOutlined, FundOutlined, FallOutlined,\r\n} from '@ant-design/icons';\r\n\r\nimport CustomScrollbars from \"utils/CustomScrollbars\";\r\nimport SidebarLogo from \"./SidebarLogo\";\r\nimport UserProfile from \"./UserProfile\";\r\n\r\nimport AppsNavigation from \"./AppsNavigation\";\r\n//import AppNotification from \"components/AppNotification\";\r\n//import MailNotification from \"components/MailNotification\";\r\nimport _ from \"lodash\"\r\nimport { requestGetRole } from \"appRedux/Actions/auth\"\r\nimport {\r\n    NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\r\n    NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\r\n    THEME_TYPE_LITE\r\n} from \"appRedux/Actions/ThemeSetting\";\r\n\r\nconst MenuItemGroup = Menu.ItemGroup;\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst convertToUpper = str => {\r\n    try {\r\n        return str.toUpperCase()\r\n    } catch (error) {\r\n        return \"\"\r\n    }\r\n}\r\nconst FindRolePermissions = (arrayList, role_id) => {\r\n    return arrayList && arrayList.find(item => parseInt(item.id) === parseInt(role_id))\r\n}\r\nconst FilterMenuByType = (arrayList, parent) => {\r\n    const result = arrayList && arrayList.filter(item => item.permission_m.perm_type === \"ROUTE\" && convertToUpper(item.permission_m.perm_parent) === convertToUpper(parent))\r\n    return result\r\n}\r\nconst SidebarContent = () => {\r\n    const dispatch = useDispatch()\r\n    let { pathname } = useSelector(({ common }) => common);\r\n    let { navStyle, themeType } = useSelector(({ settings }) => settings);\r\n\r\n    const { user, roleLists, role_id } = useSelector(({ auth }) => auth);\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetRole({ company_id: user.company_id, del_flg: 0 }))\r\n    }, [])\r\n\r\n\r\n\r\n    const getNoHeaderClass = (navStyle) => {\r\n        if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\r\n            return \"gx-no-header-notifications\";\r\n        }\r\n        return \"\";\r\n    };\r\n\r\n    const selectedKeys = pathname.substr(1);\r\n    const defaultOpenKeys = selectedKeys.split('/')[1];\r\n    /* const getNavStyleSubMenuClass = (navStyle) => {\r\n        if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\r\n            return \"gx-no-header-submenu-popup\";\r\n        }\r\n        return \"\";\r\n    }; */\r\n    return (\r\n        <>\r\n            <SidebarLogo />\r\n            <div className=\"gx-sidebar-content\">\r\n                <div className={`gx-sidebar-notifications ${getNoHeaderClass(navStyle)}`}>\r\n                    <UserProfile />\r\n                    <AppsNavigation />\r\n                </div>\r\n                <CustomScrollbars className=\"gx-layout-sider-scrollbar\">\r\n                    <Menu\r\n                        defaultOpenKeys={[defaultOpenKeys]}\r\n                        selectedKeys={[selectedKeys]}\r\n                        theme={themeType === THEME_TYPE_LITE ? 'lite' : 'dark'}\r\n                        mode=\"inline\">\r\n\r\n                        <MenuItemGroup key=\"main\" className=\"gx-menu-group\" title={\"Main\"}>\r\n                            {_.sortBy(FilterMenuByType(FindRolePermissions(roleLists, role_id) ? FindRolePermissions(roleLists, role_id).role_permission_ms : [], \"MAIN\"), [\"permission_m.permission\"]).map(item => (\r\n                                <Menu.Item key={item.permission_id}>\r\n                                    <Link to={item.permission_m.description}>\r\n                                        <i className={`icon icon-${item.permission_m.perm_icon}`} />\r\n                                        <span>{item.permission_m.permission}</span></Link>\r\n                                </Menu.Item>\r\n                            ))}\r\n                        </MenuItemGroup>\r\n                        <MenuItemGroup key=\"config\" className=\"gx-menu-group\" title={\"Config\"}>\r\n                            {_.sortBy(FilterMenuByType(FindRolePermissions(roleLists, role_id) ? FindRolePermissions(roleLists, role_id).role_permission_ms : [], \"CONFIG\"), [\"permission_m.permission\"]).map(item => (\r\n                                <Menu.Item key={item.permission_id}>\r\n                                    <Link to={item.permission_m.description}>\r\n                                        <i className={`icon icon-${item.permission_m.perm_icon}`} />\r\n                                        <span>{item.permission_m.permission}</span></Link>\r\n                                </Menu.Item>\r\n                            ))}\r\n                        </MenuItemGroup>\r\n                        <MenuItemGroup key=\"reports\" className=\"gx-menu-group\" title={\"Reports\"}>\r\n                            {_.sortBy(FilterMenuByType(FindRolePermissions(roleLists, role_id) ? FindRolePermissions(roleLists, role_id).role_permission_ms : [], \"REPORTS\"), [\"permission_m.permission\"]).map(item => (\r\n                                <Menu.Item key={item.permission_id}>\r\n                                    <Link to={item.permission_m.description}>\r\n                                        <i className={`icon icon-${item.permission_m.perm_icon}`} />\r\n                                        <span>{item.permission_m.permission}</span></Link>\r\n                                </Menu.Item>\r\n                            ))}\r\n                        </MenuItemGroup>\r\n                        <MenuItemGroup key=\"setups\" className=\"gx-menu-group\" title={\"Setups\"}>\r\n                            {_.sortBy(FilterMenuByType(FindRolePermissions(roleLists, role_id) ? FindRolePermissions(roleLists, role_id).role_permission_ms : [], \"SETUPS\"), [\"permission_m.permission\"]).map(item => (\r\n                                <Menu.Item key={item.permission_id}>\r\n                                    <Link to={item.permission_m.description}>\r\n                                        <i className={`icon icon-${item.permission_m.perm_icon}`} />\r\n                                        <span>{item.permission_m.permission}</span></Link>\r\n                                </Menu.Item>\r\n                            ))}\r\n                        </MenuItemGroup>\r\n                    </Menu>\r\n                </CustomScrollbars>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nSidebarContent.propTypes = {};\r\n\r\nexport default SidebarContent;\r\n\r\n","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\SignIn\\loginform.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\utils\\Auxiliary.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\api\\root.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Sidebar\\AppsNavigation.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Sidebar\\UserProfile.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\containers\\Sidebar\\SidebarLogo.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\utils\\CustomScrollbars.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Loading\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Alert\\notification.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Alert\\message.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Dashboard\\index.js",["541"],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Dashboard\\header.js",["542","543","544","545","546","547","548"],"import React, { useEffect, useState, } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { Row, Col } from \"antd\"\r\n//import DashboardCard from \"./card\"\r\nimport DashColor from \"utils/DashColor\";\r\nimport DashboardTops from './dashboardtops';\r\nimport BalanceHistory from \"./BalanceHistory\"\r\nimport EcommerceStatus from \"./EcommerceStatus\"\r\n\r\nimport LoadingProgress from \"components/Loading\"\r\n//import { Line, LineChart, ResponsiveContainer, Tooltip } from \"recharts\";\r\n\r\nimport { showAuthLoader, } from \"appRedux/Actions/common\"\r\nimport moment from \"moment\"\r\n//import ChartCard from './ChartCard';\r\nimport { orderBy } from \"lodash\"\r\nexport const lineData = [\r\n    { name: 'Page A', price: 200 },\r\n    { name: 'Page B', price: 1100 },\r\n    { name: 'Page C', price: 800 },\r\n    { name: 'Page D', price: 1700 },\r\n    { name: 'Page D', price: 600 },\r\n    { name: 'Page D', price: 1800 },\r\n    { name: 'Page D', price: 600 },\r\n];\r\n\r\nconst DashboardTop = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const { user, } = useSelector(({ auth }) => auth)\r\n    const { loader } = useSelector(({ common }) => common);\r\n    const [dataSource, setDataSource] = useState([])\r\n    \r\n    return (\r\n        <div>\r\n            <LoadingProgress loading={loader} />\r\n            <Row justify=\"start\">\r\n                <Col xl={4} lg={8} md={8} sm={12} xs={24}>\r\n                    <EcommerceStatus color=\"geekblue\" icon=\"revenue-new\" title={ 0} colorTitle=\"primary\"\r\n                        subTitle=\"Total Revenue Today\" colorSubTitle=\"grey\" />\r\n                </Col>\r\n                <Col xl={4} lg={8} md={8} sm={12} xs={24}>\r\n                    <EcommerceStatus color=\"orange\" icon=\"orders\" title={\r\n                        0\r\n                    } colorTitle=\"geekblue\"\r\n                        subTitle=\"Total Discount Today\" colorSubTitle=\"geekblue\" />\r\n                </Col>\r\n\r\n                <Col xl={4} lg={8} md={8} sm={12} xs={24}>\r\n                    <EcommerceStatus color={DashColor[2].cardColor} icon=\"visits\" title={ 0\r\n                    } colorTitle=\"white\" subTitle=\"Total Outstanding Debt\"\r\n                        colorSubTitle=\"geekblue\" />\r\n                </Col>\r\n                <Col xl={12} lg={16} md={24} sm={16} xs={24}>\r\n                    <BalanceHistory\r\n                    />\r\n                </Col>\r\n\r\n                <Col xl={12} lg={12} md={12} sm={24} xs={24}>\r\n                    <DashboardTops\r\n                        viewAll=\"stock/reorder\"\r\n                        cartTitle=\"Products Need Reorder\"\r\n                        size=\"small\"\r\n                        dataSource={dataSource }\r\n                        rowKey=\"product_id\"\r\n                        scroll={{\r\n                            y: 170,\r\n                        }}\r\n                        columns={[\r\n                            {\r\n                                title: '#',\r\n                                dataIndex: 'rowNumber',\r\n                                key: 'rowNumber',\r\n                                width: 30,\r\n                            }, {\r\n                                title: 'Product',\r\n                                dataIndex: 'product',\r\n                                key: 'product',\r\n                            }, {\r\n                                title: 'Unit',\r\n                                dataIndex: 'unit',\r\n                                key: 'unit',\r\n                                width: 80,\r\n                            }, {\r\n                                title: 'Qty',\r\n                                dataIndex: 'quantity',\r\n                                key: 'quantity',\r\n                                width: 60,\r\n                            }, {\r\n                                title: 'Reorder',\r\n                                dataIndex: 'reorder_level',\r\n                                key: 'reorder_level',\r\n                                width: 65,\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Col>\r\n                <Col xl={12} lg={12} md={12} sm={24} xs={24}>\r\n                    <DashboardTops\r\n                        viewAll=\"records/topselling\"\r\n                        cartTitle=\"Top Selling Products\"\r\n                        size=\"small\"\r\n                        dataSource={[]}\r\n                        rowKey=\"product_id\"\r\n                        scroll={{\r\n                            y: 170,\r\n                        }}\r\n                        columns={[\r\n                            {\r\n                                title: '#',\r\n                                dataIndex: 'rowNumber',\r\n                                key: 'rowNumber',\r\n                                width: 30,\r\n                            }, {\r\n                                title: 'Product',\r\n                                dataIndex: 'product',\r\n                                key: 'product',\r\n                            }, {\r\n                                title: 'Unit',\r\n                                dataIndex: 'unit',\r\n                                key: 'unit',\r\n                                width: 100,\r\n                            }, {\r\n                                title: 'Qty',\r\n                                dataIndex: 'quantity',\r\n                                key: 'quantity',\r\n                                width: 70,\r\n                            }, {\r\n                                title: 'Sales',\r\n                                dataIndex: 'total_amt',\r\n                                key: 'total_amt',\r\n                                width: 70,\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Col>\r\n\r\n                <Col xl={12} lg={12} md={12} sm={16} xs={24}>\r\n                    <DashboardTops\r\n                        viewAll=\"records/topcustomers\"\r\n                        cartTitle=\"Top Customer List\"\r\n                        size=\"small\"\r\n                        dataSource={[]}\r\n                        rowKey=\"customer_id\"\r\n                        scroll={{\r\n                            y: 170,\r\n                        }}\r\n                        columns={[\r\n                            {\r\n                                title: '#',\r\n                                dataIndex: 'rowNumber',\r\n                                key: 'rowNumber',\r\n                                width: 30,\r\n                            }, {\r\n                                title: 'Customer',\r\n                                dataIndex: 'customer',\r\n                                key: 'customer',\r\n                            }, {\r\n                                title: 'Total Sales',\r\n                                dataIndex: 'total_sales',\r\n                                key: 'total_sales',\r\n                            }, {\r\n                                title: 'Items Sold Qty',\r\n                                dataIndex: 'grand_qty',\r\n                                key: 'grand_qty',\r\n                            }, {\r\n                                title: 'Discount Received',\r\n                                dataIndex: 'total_discount',\r\n                                key: 'total_discount',\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Col>\r\n                <Col xl={8} lg={8} md={12} sm={16} xs={24}>\r\n                    <DashboardTops\r\n                        viewAll=\"records/allbillsdue\"\r\n                        cartTitle=\"All Bills Due\"\r\n                        size=\"small\"\r\n                        dataSource={[]}\r\n                        rowKey=\"customer_id\"\r\n                        scroll={{\r\n                            y: 170,\r\n                        }}\r\n                        columns={[\r\n                            {\r\n                                title: '#',\r\n                                dataIndex: 'rowNumber',\r\n                                key: 'rowNumber',\r\n                                width: 30,\r\n                            }, {\r\n                                title: 'Customer',\r\n                                dataIndex: 'customer',\r\n                                key: 'customer',\r\n                            }, {\r\n                                title: 'Outstanding Debt',\r\n                                dataIndex: 'debt',\r\n                                key: 'debt',\r\n                            },\r\n                        ]}\r\n                    />\r\n                </Col>\r\n\r\n\r\n\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardTop;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Dashboard\\EcommerceStatus.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Dashboard\\BalanceHistory.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Dashboard\\dashboardtops.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\utils\\DashColor.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\AppNotification\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\MailNotification\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\AppNotification\\data.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\AppNotification\\NotificationItem.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\MailNotification\\NotificationItem.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\MailNotification\\data.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Widget\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\UserInfo\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Customer\\index.js",["549","550"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { Button, Menu, Dropdown, Popconfirm } from \"antd\"\r\nimport { EditOutlined, MoreOutlined, DeleteOutlined } from \"@ant-design/icons\"\r\n\r\nimport PageContent from \"components/PageContent\"\r\nimport LoadingProgress from \"components/Loading\"\r\nimport FormModal from \"components/Modals\"\r\n\r\nimport Create from \"./Create\"\r\nimport Edit from \"./Edit\"\r\n\r\nimport { showAuthLoader, hideAuthLoader, showModal, hideModal } from \"appRedux/Actions/common\"\r\nimport { requestSaveCustomer, requestUpdateCustomer, requestDeleteCustomer, requestGetCustomer } from \"appRedux/Actions/people\"\r\n\r\nimport { requestGetBranch, } from \"appRedux/Actions/auth\"\r\nimport FuzzySearch from 'fuzzy-search';\r\nimport FindName from \"utils/FindName\"\r\nlet searcher;\r\nconst Customers = () => {\r\n    const dispatch = useDispatch()\r\n    const [modalType, setModalType] = useState(false)\r\n    const [detail, setDetail] = useState({})\r\n    const { customerLists, } = useSelector(({ people }) => people);\r\n    const { modal, loader } = useSelector(({ common }) => common);\r\n    const { authUser, user, branchLists } = useSelector(({ auth }) => auth);\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetCustomer({\r\n            del_flg: 0, company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n        }))\r\n    }, [])\r\n    useEffect(() => {\r\n        dispatch(requestGetBranch({ del_flg: 0, company_id: user.company_id, }))\r\n    }, [])\r\n\r\n    const LoadNShowModal = () => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(showModal())\r\n    }\r\n\r\n    const CloseModal = () => dispatch(hideModal())\r\n    const hideModalLoader = () => dispatch(hideAuthLoader())\r\n    const EditDataHandler = record => {\r\n        setModalType(true)\r\n        setDetail(record)\r\n        LoadNShowModal()\r\n    }\r\n\r\n    const DeleteHandler = record => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestDeleteCustomer(record.id))\r\n    }\r\n    const AddNewHandler = () => {\r\n        setModalType(false)\r\n        LoadNShowModal()\r\n    }\r\n    const SaveHandler = (record) => {\r\n        const data = {\r\n            company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n            created_user: authUser,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestSaveCustomer(data))\r\n    }\r\n    const UpdateHandler = (record) => {\r\n        const data = {\r\n            id: detail.id,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestUpdateCustomer(data))\r\n    }\r\n\r\n    const ValidationAlert = errorInfo => {\r\n        // console.log(errorInfo)\r\n    }\r\n\r\n    const [dataSource, setDataSource] = useState([])\r\n    searcher = new FuzzySearch(customerLists, [\"customer_no\", \"customer\", \"account_no\",\r\n        \"branch_m.branch_name\", \"telephone\", \"address\", \"email\",], { caseSensitive: false });\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            setDataSource(await customerLists)\r\n        }\r\n        LoadData()\r\n    }, [customerLists])\r\n    const OnSearch = (e) => setDataSource(searcher.search(e.target.value))\r\n\r\n    return (\r\n        <div className=\"gx-main-content\">\r\n            <FormModal\r\n                children={\r\n                    <div>\r\n                        <LoadingProgress loading={loader} />\r\n                        {modalType ?\r\n                            <Edit detail={detail} onFinish={UpdateHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert}\r\n                                branchLists={branchLists}\r\n                            />\r\n                            :\r\n                            <Create onFinish={SaveHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert}\r\n                                branchLists={branchLists}\r\n                            />\r\n                        }\r\n                    </div>\r\n                }\r\n                title={modalType ? \"Edit\" : \"Create\"}\r\n                visible={modal}\r\n                width={600}\r\n                handleCancel={CloseModal}\r\n            />\r\n\r\n\r\n            <PageContent\r\n                OnSearch={OnSearch}\r\n                rowKey=\"customer_no\"\r\n                dataSource={dataSource.map(item => {\r\n                    return {\r\n                        ...item,\r\n                        branch: item.branch_m ? item.branch_m.branch_name :\r\n                            FindName(branchLists, item.branch_id).branch_name,\r\n                    }\r\n                })}\r\n                AddNewHandler={AddNewHandler}\r\n                pageTitle=\"Customers\"\r\n                placeholder=\"Search for Customers\"\r\n                scroll={{ width: 700 }}\r\n                loading={{ spinning: loader, indicator: <LoadingProgress loading={loader} /> }}\r\n                addNewText=\"Customer\"\r\n                columns={[\r\n                    {\r\n                        title: 'Customer No',\r\n                        dataIndex: 'customer_no',\r\n                        key: 'id',\r\n                        width: 150,\r\n                        fixed: 'left',\r\n                    }, {\r\n                        title: 'Branch',\r\n                        dataIndex: 'branch',\r\n                        key: 'branch',\r\n                    }, {\r\n                        title: 'Customer',\r\n                        dataIndex: 'customer',\r\n                        key: 'customer',\r\n                    }, {\r\n                        title: 'Account No',\r\n                        dataIndex: 'account_no',\r\n                        key: 'account_no',\r\n                    }, {\r\n                        title: 'Telephone',\r\n                        dataIndex: 'telephone',\r\n                        key: 'telephone',\r\n                    }, {\r\n                        title: 'Address',\r\n                        dataIndex: 'address',\r\n                        key: 'address',\r\n                    }, {\r\n                        title: 'Email',\r\n                        dataIndex: 'email',\r\n                        key: 'email',\r\n                    },\r\n                    {\r\n                        title: 'Action',\r\n                        key: 'action',\r\n                        fixed: 'right',\r\n                        width: 70,\r\n                        render: (text, record) => (\r\n                            <span >\r\n                                <Dropdown\r\n                                    //  disabled={sessionStorage.role === \"ADMIN\" ? false : true}\r\n                                    overlay={\r\n                                        (<Menu>\r\n                                            <Menu.Item key=\"1\">\r\n                                                <span className=\"gx-text-blue\" onClick={() => EditDataHandler(record)}>\r\n                                                    <EditOutlined /> Edit\r\n                                            </span>\r\n                                            </Menu.Item>\r\n                                            <Menu.Item key=\"2\">\r\n                                                <Popconfirm\r\n                                                    placement=\"top\"\r\n                                                    title={`Are you sure to delete ${record.customer}?`}\r\n                                                    onConfirm={() => DeleteHandler(record)}\r\n                                                    onCancel={(e) => console.log(e)}\r\n                                                    okText=\"Yes\"\r\n                                                    cancelText=\"No\"\r\n                                                >\r\n                                                    <span className=\"gx-text-red\" >\r\n                                                        <DeleteOutlined /> Delete\r\n                                            </span>\r\n                                                </Popconfirm>\r\n\r\n                                            </Menu.Item>\r\n                                        </Menu>)\r\n                                    } placement=\"bottomRight\" trigger={['click']}>\r\n                                    <Button type=\"primary\" className=\"gx-bg-geekblue\"\r\n                                        shape=\"circle\"\r\n                                        icon={<MoreOutlined style={{ fontWeight: 700 }} />}\r\n                                        size=\"middle\" />\r\n                                </Dropdown>\r\n                            </span>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Customers;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Customer\\Create.js",["551","552"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input, Select } from \"antd\"\r\nimport { SaveOutlined, PhoneFilled } from \"@ant-design/icons\"\r\nimport { useSelector } from \"react-redux\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst Create = ({ onFinish, onFinishFailed, hideModalLoader,branchLists }) => {\r\n\r\n     useEffect(() => {\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Add\" onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Branch\" name=\"branch_id\"\r\n                    rules={[{ required: true, message: 'Please Select Branch', },]}\r\n                >\r\n                    <Select  showSearch placeholder=\"Select Branch\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {branchLists && branchLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <Option key={item.id} value={item.id}>{item.branch_name}</Option>\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"Customer No\" name=\"customer_no\"\r\n                    rules={[{ required: true, message: 'Please Enter Customer No', },]}\r\n                >\r\n                    <Input placeholder=\"Customer No\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Customer\" name=\"customer\"\r\n                    rules={[{ required: true, message: 'Please Enter Customer', },]}\r\n                >\r\n                    <Input placeholder=\"Customer\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Account No\" name=\"account_no\"\r\n                    rules={[{ required: true, message: 'Please Enter Account No', },]}\r\n                >\r\n                    <Input placeholder=\"Account No\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Telephone\" name=\"telephone\"\r\n                    rules={[{ required: true, message: 'Please Enter Telephone', },]}\r\n                >\r\n                    <Input placeholder=\"Telephone\" addonBefore=\"+233\" suffix={<PhoneFilled />} />\r\n                </Form.Item>\r\n                <Form.Item label=\"Email\" name=\"email\" >\r\n                    <Input placeholder=\"Email\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Address\" name=\"address\"   >\r\n                    <TextArea allowClear placeholder=\"Address\" autoSize={{ minRows: 2, maxRows: 6 }} />\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Save\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Customer\\Edit.js",["553"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input, Select } from \"antd\"\r\nimport { SaveOutlined, PhoneFilled } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst Edit = ({ detail, onFinish, onFinishFailed, hideModalLoader, branchLists }) => {\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            branch_id: detail.branch_id,\r\n            customer: detail.customer,\r\n            customer_no: detail.customer_no,\r\n            account_no: detail.account_no,\r\n            telephone: detail.telephone,\r\n            email: detail.email,\r\n            address: detail.address,\r\n        });\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [detail])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Edit\" form={form} onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Branch\" name=\"branch_id\"\r\n                    rules={[{ required: true, message: 'Please Select Branch', },]}\r\n                >\r\n                    <Select showSearch placeholder=\"Select Branch\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {branchLists && branchLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                {detail.branch_id === item.id ?\r\n                                    <Option selected value={detail.branch_id} >{item.branch_name}</Option>\r\n                                    : <Option key={item.id} value={item.id}>{item.branch_name}</Option>}\r\n                            </React.Fragment>))}\r\n\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"Customer No\" name=\"customer_no\"\r\n                    rules={[{ required: true, message: 'Please Enter Customer No', },]}\r\n                >\r\n                    <Input placeholder=\"Customer No\" allowClear disabled />\r\n                </Form.Item>\r\n                <Form.Item label=\"Customer\" name=\"customer\"\r\n                    rules={[{ required: true, message: 'Please Enter Customer', },]}\r\n                >\r\n                    <Input placeholder=\"Customer\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Account No\" name=\"account_no\"\r\n                    rules={[{ required: true, message: 'Please Enter Account No', },]}\r\n                >\r\n                    <Input placeholder=\"Account No\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Telephone\" name=\"telephone\"\r\n                    rules={[{ required: true, message: 'Please Enter Telephone', },]}\r\n                >\r\n                    <Input placeholder=\"Telephone\" addonBefore=\"+233\" suffix={<PhoneFilled />} />\r\n                </Form.Item>\r\n                <Form.Item label=\"Email\" name=\"email\" >\r\n                    <Input placeholder=\"Email\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Address\" name=\"address\"   >\r\n                    <TextArea allowClear placeholder=\"Address\" autoSize={{ minRows: 2, maxRows: 6 }} />\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Update\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Edit;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Modals\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\PageContent\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Datatable\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\PageHeader\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Searchbox\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\ActionTools\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\IndicatorType\\index.js",["554"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { Button, Menu, Dropdown, Popconfirm } from \"antd\"\r\nimport { EditOutlined, MoreOutlined, DeleteOutlined } from \"@ant-design/icons\"\r\n\r\nimport PageContent from \"components/PageContent\"\r\nimport LoadingProgress from \"components/Loading\"\r\nimport FormModal from \"components/Modals\"\r\n\r\nimport Create from \"./Create\"\r\nimport Edit from \"./Edit\"\r\n\r\nimport { showAuthLoader, hideAuthLoader, showModal, hideModal } from \"appRedux/Actions/common\"\r\nimport { requestSaveIndicatorType, requestUpdateIndicatorType, requestDeleteIndicatorType, requestGetIndicatorType } from \"appRedux/Actions/indicator\"\r\n\r\nimport FuzzySearch from 'fuzzy-search';\r\nlet searcher;\r\nconst IndicatorTypes = () => {\r\n    const dispatch = useDispatch()\r\n    const [modalType, setModalType] = useState(false)\r\n    const [detail, setDetail] = useState({})\r\n    const { indicatorTypeLists } = useSelector(({ indicators }) => indicators);\r\n    const { modal, loader } = useSelector(({ common }) => common);\r\n    const { authUser, user } = useSelector(({ auth }) => auth);\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetIndicatorType({\r\n            del_flg: 0, company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n        }))\r\n    }, [])\r\n\r\n    const LoadNShowModal = () => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(showModal())\r\n    }\r\n\r\n    const CloseModal = () => dispatch(hideModal())\r\n    const hideModalLoader = () => dispatch(hideAuthLoader())\r\n    const EditDataHandler = record => {\r\n        setModalType(true)\r\n        setDetail(record)\r\n        LoadNShowModal()\r\n    }\r\n\r\n    const DeleteHandler = record => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestDeleteIndicatorType(record.id))\r\n    }\r\n    const AddNewHandler = () => {\r\n        setModalType(false)\r\n        LoadNShowModal()\r\n    }\r\n    const SaveHandler = (record) => {\r\n        const data = {\r\n            company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n            created_user: authUser,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestSaveIndicatorType(data))\r\n    }\r\n    const UpdateHandler = (record) => {\r\n        const data = {\r\n            id: detail.id,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestUpdateIndicatorType(data))\r\n    }\r\n\r\n    const ValidationAlert = errorInfo => {\r\n        // console.log(errorInfo)\r\n    }\r\n\r\n    const [dataSource, setDataSource] = useState([])\r\n    searcher = new FuzzySearch(indicatorTypeLists, [\"indicator_type\"], { caseSensitive: false });\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            setDataSource(await indicatorTypeLists)\r\n        }\r\n        LoadData()\r\n    }, [indicatorTypeLists])\r\n    const OnSearch = (e) => setDataSource(searcher.search(e.target.value))\r\n\r\n    return (\r\n        <div className=\"gx-main-content\">\r\n            <FormModal\r\n                children={\r\n                    <div>\r\n                        <LoadingProgress loading={loader} />\r\n                        {modalType ?\r\n                            <Edit detail={detail} onFinish={UpdateHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert}\r\n\r\n                            />\r\n                            :\r\n                            <Create onFinish={SaveHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert}\r\n\r\n                            />\r\n                        }\r\n                    </div>\r\n                }\r\n                title={modalType ? \"Edit\" : \"Create\"}\r\n                visible={modal}\r\n                width={600}\r\n                handleCancel={CloseModal}\r\n            />\r\n\r\n\r\n            <PageContent\r\n                OnSearch={OnSearch}\r\n                rowKey=\"id\"\r\n                dataSource={dataSource}\r\n                AddNewHandler={AddNewHandler}\r\n                pageTitle=\"Indicator Type\"\r\n                placeholder=\"Search for Indicator Type\"\r\n                scroll={{ width: 700 }}\r\n                loading={{ spinning: loader, indicator: <LoadingProgress loading={loader} /> }}\r\n                addNewText=\"Indicator Type\"\r\n                columns={[\r\n                    {\r\n                        title: 'ID',\r\n                        dataIndex: 'id',\r\n                        key: 'id',\r\n                        width: 70,\r\n                        fixed: 'left',\r\n                    }, {\r\n                        title: 'Indicator Type',\r\n                        dataIndex: 'indicator_type',\r\n                        key: 'indicator_type',\r\n                    },\r\n                    {\r\n                        title: 'Action',\r\n                        key: 'action',\r\n                        fixed: 'right',\r\n                        width: 70,\r\n                        render: (text, record) => (\r\n                            <span >\r\n                                <Dropdown\r\n                                    //  disabled={sessionStorage.role === \"ADMIN\" ? false : true}\r\n                                    overlay={\r\n                                        (<Menu>\r\n                                            <Menu.Item key=\"1\">\r\n                                                <span className=\"gx-text-blue\" onClick={() => EditDataHandler(record)}>\r\n                                                    <EditOutlined /> Edit\r\n                                            </span>\r\n                                            </Menu.Item>\r\n                                            <Menu.Item key=\"2\">\r\n                                                <Popconfirm\r\n                                                    placement=\"top\"\r\n                                                    title={`Are you sure to delete ${record.indicator_type}?`}\r\n                                                    onConfirm={() => DeleteHandler(record)}\r\n                                                    onCancel={(e) => console.log(e)}\r\n                                                    okText=\"Yes\"\r\n                                                    cancelText=\"No\"\r\n                                                >\r\n                                                    <span className=\"gx-text-red\" >\r\n                                                        <DeleteOutlined /> Delete\r\n                                            </span>\r\n                                                </Popconfirm>\r\n\r\n                                            </Menu.Item>\r\n                                        </Menu>)\r\n                                    } placement=\"bottomRight\" trigger={['click']}>\r\n                                    <Button type=\"primary\" className=\"gx-bg-geekblue\"\r\n                                        shape=\"circle\"\r\n                                        icon={<MoreOutlined style={{ fontWeight: 700 }} />}\r\n                                        size=\"middle\" />\r\n                                </Dropdown>\r\n                            </span>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IndicatorTypes;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\IndicatorDescription\\index.js",["555"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { Button, Menu, Dropdown, Popconfirm } from \"antd\"\r\nimport { EditOutlined, MoreOutlined, DeleteOutlined } from \"@ant-design/icons\"\r\n\r\nimport PageContent from \"components/PageContent\"\r\nimport LoadingProgress from \"components/Loading\"\r\nimport FormModal from \"components/Modals\"\r\n\r\nimport Create from \"./Create\"\r\nimport Edit from \"./Edit\"\r\n\r\nimport { showAuthLoader, hideAuthLoader, showModal, hideModal } from \"appRedux/Actions/common\"\r\nimport { requestSaveDescription, requestUpdateDescription, requestDeleteDescription, requestGetDescription } from \"appRedux/Actions/indicator\"\r\n\r\nimport FuzzySearch from 'fuzzy-search';\r\nlet searcher;\r\nconst IndicatorDescription = () => {\r\n    const dispatch = useDispatch()\r\n    const [modalType, setModalType] = useState(false)\r\n    const [detail, setDetail] = useState({})\r\n    const { descriptionLists } = useSelector(({ indicators }) => indicators);\r\n    const { modal, loader } = useSelector(({ common }) => common);\r\n    const { authUser, user } = useSelector(({ auth }) => auth);\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetDescription({\r\n            del_flg: 0, company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n        }))\r\n    }, [])\r\n\r\n    const LoadNShowModal = () => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(showModal())\r\n    }\r\n\r\n    const CloseModal = () => dispatch(hideModal())\r\n    const hideModalLoader = () => dispatch(hideAuthLoader())\r\n    const EditDataHandler = record => {\r\n        setModalType(true)\r\n        setDetail(record)\r\n        LoadNShowModal()\r\n    }\r\n\r\n    const DeleteHandler = record => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestDeleteDescription(record.id))\r\n    }\r\n    const AddNewHandler = () => {\r\n        setModalType(false)\r\n        LoadNShowModal()\r\n    }\r\n    const SaveHandler = (record) => {\r\n        const data = {\r\n            company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n            created_user: authUser,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestSaveDescription(data))\r\n    }\r\n    const UpdateHandler = (record) => {\r\n        const data = {\r\n            id: detail.id,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestUpdateDescription(data))\r\n    }\r\n\r\n    const ValidationAlert = errorInfo => {\r\n        // console.log(errorInfo)\r\n    }\r\n\r\n    const [dataSource, setDataSource] = useState([])\r\n    searcher = new FuzzySearch(descriptionLists, [\"description\"], { caseSensitive: false });\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            setDataSource(await descriptionLists)\r\n        }\r\n        LoadData()\r\n    }, [descriptionLists])\r\n    const OnSearch = (e) => setDataSource(searcher.search(e.target.value))\r\n\r\n    return (\r\n        <div className=\"gx-main-content\">\r\n            <FormModal\r\n                children={\r\n                    <div>\r\n                        <LoadingProgress loading={loader} />\r\n                        {modalType ?\r\n                            <Edit detail={detail} onFinish={UpdateHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert}\r\n\r\n                            />\r\n                            :\r\n                            <Create onFinish={SaveHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert}\r\n\r\n                            />\r\n                        }\r\n                    </div>\r\n                }\r\n                title={modalType ? \"Edit\" : \"Create\"}\r\n                visible={modal}\r\n                width={600}\r\n                handleCancel={CloseModal}\r\n            />\r\n\r\n\r\n            <PageContent\r\n                OnSearch={OnSearch}\r\n                rowKey=\"id\"\r\n                dataSource={dataSource}\r\n                AddNewHandler={AddNewHandler}\r\n                pageTitle=\"Indicator Description\"\r\n                placeholder=\"Search for Description\"\r\n                scroll={{ width: 700 }}\r\n                loading={{ spinning: loader, indicator: <LoadingProgress loading={loader} /> }}\r\n                addNewText=\"Description\"\r\n                columns={[\r\n                    {\r\n                        title: 'ID',\r\n                        dataIndex: 'id',\r\n                        key: 'id',\r\n                        width: 70,\r\n                        fixed: 'left',\r\n                    }, {\r\n                        title: ' Description',\r\n                        dataIndex: 'description',\r\n                        key: 'description',\r\n                    },\r\n                    {\r\n                        title: 'Action',\r\n                        key: 'action',\r\n                        fixed: 'right',\r\n                        width: 70,\r\n                        render: (text, record) => (\r\n                            <span >\r\n                                <Dropdown\r\n                                    //  disabled={sessionStorage.role === \"ADMIN\" ? false : true}\r\n                                    overlay={\r\n                                        (<Menu>\r\n                                            <Menu.Item key=\"1\">\r\n                                                <span className=\"gx-text-blue\" onClick={() => EditDataHandler(record)}>\r\n                                                    <EditOutlined /> Edit\r\n                                            </span>\r\n                                            </Menu.Item>\r\n                                            <Menu.Item key=\"2\">\r\n                                                <Popconfirm\r\n                                                    placement=\"top\"\r\n                                                    title={`Are you sure to delete ${record.description}?`}\r\n                                                    onConfirm={() => DeleteHandler(record)}\r\n                                                    onCancel={(e) => console.log(e)}\r\n                                                    okText=\"Yes\"\r\n                                                    cancelText=\"No\"\r\n                                                >\r\n                                                    <span className=\"gx-text-red\" >\r\n                                                        <DeleteOutlined /> Delete\r\n                                            </span>\r\n                                                </Popconfirm>\r\n\r\n                                            </Menu.Item>\r\n                                        </Menu>)\r\n                                    } placement=\"bottomRight\" trigger={['click']}>\r\n                                    <Button type=\"primary\" className=\"gx-bg-geekblue\"\r\n                                        shape=\"circle\"\r\n                                        icon={<MoreOutlined style={{ fontWeight: 700 }} />}\r\n                                        size=\"middle\" />\r\n                                </Dropdown>\r\n                            </span>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IndicatorDescription;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\IndicatorType\\Create.js",["556"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input } from \"antd\"\r\nimport { SaveOutlined, } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\n\r\n\r\nconst Create = ({ onFinish, onFinishFailed, hideModalLoader }) => {\r\n\r\n  \r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Add\" onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                \r\n                <Form.Item label=\"Indicator Type\" name=\"indicator_type\"\r\n                    rules={[{ required: true, message: 'Please Enter Indicator Type', },]}\r\n                >\r\n                    <Input placeholder=\"Indicator Type\" allowClear />\r\n                </Form.Item>\r\n               \r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Save\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\IndicatorType\\Edit.js",["557"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input,  } from \"antd\"\r\nimport { SaveOutlined,  } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst Edit = ({ detail, onFinish, onFinishFailed, hideModalLoader, }) => {\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            indicator_type: detail.indicator_type,\r\n            \r\n        });\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [detail])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Edit\" form={form} onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                \r\n                <Form.Item label=\"Indicator Type\" name=\"indicator_type\"\r\n                    rules={[{ required: true, message: 'Please Enter Indicator Type', },]}\r\n                >\r\n                    <Input placeholder=\"Indicator Type\" allowClear />\r\n                </Form.Item>\r\n                \r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Update\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Edit;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\IndicatorDescription\\Edit.js",["558"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input,  } from \"antd\"\r\nimport { SaveOutlined,  } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst { TextArea } = Input;\r\nconst Edit = ({ detail, onFinish, onFinishFailed, hideModalLoader, }) => {\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            description: detail.description,\r\n        });\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [detail])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Edit\" form={form} onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                \r\n                <Form.Item label=\"Description\" name=\"description\"\r\n                    rules={[{ required: true, message: 'Please Enter Description', },]}\r\n                >\r\n                  <TextArea allowClear placeholder=\"Description\" autoSize={{ minRows: 5, maxRows: 10 }} />\r\n\r\n                </Form.Item>\r\n                \r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 100 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Update\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Edit;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\IndicatorDescription\\Create.js",["559"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input } from \"antd\"\r\nimport { SaveOutlined, } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\n\r\n\r\nconst { TextArea } = Input;\r\nconst Create = ({ onFinish, onFinishFailed, hideModalLoader }) => {\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Add\" onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n\r\n                <Form.Item label=\"Description\" name=\"description\"\r\n                    rules={[{ required: true, message: 'Please Enter Description', },]}\r\n                >\r\n                   <TextArea allowClear placeholder=\"Description\" autoSize={{ minRows: 5, maxRows: 10 }} />\r\n\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 100 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Save\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\Indicator\\index.js",["560","561"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { Button, Menu, Dropdown, Popconfirm } from \"antd\"\r\nimport { EditOutlined, MoreOutlined, DeleteOutlined } from \"@ant-design/icons\"\r\n\r\nimport PageContent from \"components/PageContent\"\r\nimport LoadingProgress from \"components/Loading\"\r\nimport FormModal from \"components/Modals\"\r\n\r\nimport Create from \"./Create\"\r\nimport Edit from \"./Edit\"\r\n\r\nimport { showAuthLoader, hideAuthLoader, showModal, hideModal } from \"appRedux/Actions/common\"\r\nimport { requestGetIndicatorType, requestSaveIndicator, requestUpdateIndicator, requestDeleteIndicator, requestGetIndicator } from \"appRedux/Actions/indicator\"\r\n\r\nimport FuzzySearch from 'fuzzy-search';\r\nconst FindName = (arrayLists, value) => arrayLists.find(item => parseInt(item.id) === parseInt(value))\r\n\r\nlet searcher;\r\nconst Indicator = () => {\r\n    const dispatch = useDispatch()\r\n    const [modalType, setModalType] = useState(false)\r\n    const [detail, setDetail] = useState({})\r\n    const { indicatorLists, indicatorTypeLists } = useSelector(({ indicators }) => indicators);\r\n    const { modal, loader } = useSelector(({ common }) => common);\r\n    const { authUser, user } = useSelector(({ auth }) => auth);\r\n    useEffect(() => {\r\n        dispatch(requestGetIndicatorType({\r\n            del_flg: 0, company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n        }))\r\n    }, [])\r\n    useEffect(() => {\r\n        dispatch(requestGetIndicator({\r\n            del_flg: 0, company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n        }))\r\n    }, [])\r\n\r\n    const LoadNShowModal = () => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(showModal())\r\n    }\r\n\r\n    const CloseModal = () => dispatch(hideModal())\r\n    const hideModalLoader = () => dispatch(hideAuthLoader())\r\n    const EditDataHandler = record => {\r\n        setModalType(true)\r\n        setDetail(record)\r\n        LoadNShowModal()\r\n    }\r\n\r\n    const DeleteHandler = record => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestDeleteIndicator(record.id))\r\n    }\r\n    const AddNewHandler = () => {\r\n        setModalType(false)\r\n        LoadNShowModal()\r\n    }\r\n    const SaveHandler = (record) => {\r\n        const data = {\r\n            company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n            created_user: authUser,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestSaveIndicator(data))\r\n    }\r\n    const UpdateHandler = (record) => {\r\n        const data = {\r\n            id: detail.id,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestUpdateIndicator(data))\r\n    }\r\n\r\n    const ValidationAlert = errorInfo => {\r\n        // console.log(errorInfo)\r\n    }\r\n\r\n    const [dataSource, setDataSource] = useState([])\r\n    searcher = new FuzzySearch(indicatorLists, [\"indicator\", \"indicator_type_m.indicator_type\"], { caseSensitive: false });\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            setDataSource(await indicatorLists)\r\n        }\r\n        LoadData()\r\n    }, [indicatorLists])\r\n    const OnSearch = (e) => setDataSource(searcher.search(e.target.value))\r\n\r\n    return (\r\n        <div className=\"gx-main-content\">\r\n            <FormModal\r\n                children={\r\n                    <div>\r\n                        <LoadingProgress loading={loader} />\r\n                        {modalType ?\r\n                            <Edit detail={detail} onFinish={UpdateHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert}\r\n                                indicatorTypeLists={indicatorTypeLists}\r\n                            />\r\n                            :\r\n                            <Create onFinish={SaveHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert}\r\n                                indicatorTypeLists={indicatorTypeLists}\r\n                            />\r\n                        }\r\n                    </div>\r\n                }\r\n                title={modalType ? \"Edit\" : \"Create\"}\r\n                visible={modal}\r\n                width={600}\r\n                handleCancel={CloseModal}\r\n            />\r\n\r\n\r\n            <PageContent\r\n                OnSearch={OnSearch}\r\n                rowKey=\"id\"\r\n                dataSource={dataSource.map(item => {\r\n                    return {\r\n                        ...item, indicator_type: item.indicator_type_m ? item.indicator_type_m.indicator_type : FindName(indicatorTypeLists, item.indicator_type_id).indicator_type,\r\n                    }\r\n                })}\r\n                AddNewHandler={AddNewHandler}\r\n                pageTitle=\"Indicator\"\r\n                placeholder=\"Search for Indicator\"\r\n                scroll={{ width: 700 }}\r\n                loading={{ spinning: loader, indicator: <LoadingProgress loading={loader} /> }}\r\n                addNewText=\"Indicator\"\r\n                columns={[\r\n                    {\r\n                        title: 'ID',\r\n                        dataIndex: 'id',\r\n                        key: 'id',\r\n                        width: 70,\r\n                        fixed: 'left',\r\n                    }, {\r\n                        title: 'Indicator Type',\r\n                        dataIndex: 'indicator_type',\r\n                        key: 'indicator_type',\r\n                    }, {\r\n                        title: 'Indicator ',\r\n                        dataIndex: 'indicator',\r\n                        key: 'indicator',\r\n                    }, {\r\n                        title: 'Sort Order ',\r\n                        dataIndex: 'sort_order',\r\n                        key: 'sort_order',\r\n                    },\r\n                    {\r\n                        title: 'Action',\r\n                        key: 'action',\r\n                        fixed: 'right',\r\n                        width: 70,\r\n                        render: (text, record) => (\r\n                            <span >\r\n                                <Dropdown\r\n                                    //  disabled={sessionStorage.role === \"ADMIN\" ? false : true}\r\n                                    overlay={\r\n                                        (<Menu>\r\n                                            <Menu.Item key=\"1\">\r\n                                                <span className=\"gx-text-blue\" onClick={() => EditDataHandler(record)}>\r\n                                                    <EditOutlined /> Edit\r\n                                            </span>\r\n                                            </Menu.Item>\r\n                                            <Menu.Item key=\"2\">\r\n                                                <Popconfirm\r\n                                                    placement=\"top\"\r\n                                                    title={`Are you sure to delete ${record.indicator}?`}\r\n                                                    onConfirm={() => DeleteHandler(record)}\r\n                                                    onCancel={(e) => console.log(e)}\r\n                                                    okText=\"Yes\"\r\n                                                    cancelText=\"No\"\r\n                                                >\r\n                                                    <span className=\"gx-text-red\" >\r\n                                                        <DeleteOutlined /> Delete\r\n                                            </span>\r\n                                                </Popconfirm>\r\n\r\n                                            </Menu.Item>\r\n                                        </Menu>)\r\n                                    } placement=\"bottomRight\" trigger={['click']}>\r\n                                    <Button type=\"primary\" className=\"gx-bg-geekblue\"\r\n                                        shape=\"circle\"\r\n                                        icon={<MoreOutlined style={{ fontWeight: 700 }} />}\r\n                                        size=\"middle\" />\r\n                                </Dropdown>\r\n                            </span>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Indicator;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\Indicator\\Create.js",["562"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input, Select, InputNumber } from \"antd\"\r\nimport { SaveOutlined, } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\nconst { TextArea } = Input\r\nconst { Option } = Select\r\nconst Create = ({ onFinish, onFinishFailed, hideModalLoader, indicatorTypeLists }) => {\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Add\" onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Type\" name=\"indicator_type_id\"\r\n                    rules={[{ required: true, message: 'Please Select Type', },]}\r\n                >\r\n                    <Select showSearch placeholder=\"Select Type\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {indicatorTypeLists && indicatorTypeLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <Option key={item.id} value={item.id}>{item.indicator_type}</Option>\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"Sort Order\" name=\"sort_order\" >\r\n                    <InputNumber style={{ width: '100%' }} placeholder=\"Sort Order\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Indicator\" name=\"indicator\"\r\n                    rules={[{ required: true, message: 'Please Enter Indicator', },]}\r\n                >\r\n                    <TextArea allowClear placeholder=\"Indicator\" autoSize={{ minRows: 5, maxRows: 10 }} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 100 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Save\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\Indicator\\Edit.js",["563"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input, Select, InputNumber } from \"antd\"\r\nimport { SaveOutlined, } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\nconst { TextArea } = Input\r\nconst { Option } = Select\r\nconst Edit = ({ detail, onFinish, onFinishFailed, hideModalLoader, indicatorTypeLists }) => {\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            indicator_type_id: detail.indicator_type_id,\r\n            indicator: detail.indicator,\r\n            sort_order: detail.sort_order,\r\n        });\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [detail])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Edit\" form={form} onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Type\" name=\"indicator_type_id\"\r\n                    rules={[{ required: true, message: 'Please Select Type', },]}\r\n                >\r\n                    <Select showSearch placeholder=\"Select Type\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {indicatorTypeLists && indicatorTypeLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                {detail.indicator_type_id === item.id ?\r\n                                    <Option selected value={detail.indicator_type_id} >{item.indicator_type}</Option>\r\n                                    : <Option key={item.id} value={item.id}>{item.indicator_type}</Option>}\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"Sort Order\" name=\"sort_order\" >\r\n                    <InputNumber style={{ width: '100%' }} placeholder=\"Sort Order\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Indicator \" name=\"indicator\"\r\n                    rules={[{ required: true, message: 'Please Enter Indicator', },]}\r\n                >\r\n                    <TextArea allowClear placeholder=\"Indicator\" autoSize={{ minRows: 5, maxRows: 10 }} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 100 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Update\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Edit;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\sagas\\indicator.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\indicator.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\api\\indicator.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\indicator.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\Mapping\\index.js",["564","565","566"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { Button, Menu, Dropdown, Popconfirm } from \"antd\"\r\nimport { EditOutlined, MoreOutlined, DeleteOutlined } from \"@ant-design/icons\"\r\n\r\nimport PageContent from \"components/PageContent\"\r\nimport LoadingProgress from \"components/Loading\"\r\nimport FormModal from \"components/Modals\"\r\n\r\nimport Create from \"./Create\"\r\nimport Edit from \"./Edit\"\r\n\r\nimport { showAuthLoader, hideAuthLoader, showModal, hideModal } from \"appRedux/Actions/common\"\r\nimport {\r\n    requestGetIndicatorMapping, requestSaveIndicatorMapping, requestUpdateIndicatorMapping,\r\n    requestDeleteIndicatorMapping, requestGetIndicator,\r\n    requestGetDescription,\r\n} from \"appRedux/Actions/indicator\"\r\n\r\nimport FuzzySearch from 'fuzzy-search';\r\nimport FindName from \"utils/FindName\"\r\n\r\nlet searcher;\r\nconst IndicatorMapping = () => {\r\n    const dispatch = useDispatch()\r\n    const [modalType, setModalType] = useState(false)\r\n    const [detail, setDetail] = useState({})\r\n    const { indicatorLists, indicatorMappingLists, descriptionLists } = useSelector(({ indicators }) => indicators);\r\n    const { modal, loader } = useSelector(({ common }) => common);\r\n    const { authUser, user } = useSelector(({ auth }) => auth);\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetIndicatorMapping({\r\n            del_flg: 0, company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n        }))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetDescription({\r\n            del_flg: 0, company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n        }))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetIndicator({\r\n            del_flg: 0, company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n        }))\r\n    }, [])\r\n\r\n    const LoadNShowModal = () => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(showModal())\r\n    }\r\n\r\n    const CloseModal = () => dispatch(hideModal())\r\n    const hideModalLoader = () => dispatch(hideAuthLoader())\r\n    const EditDataHandler = record => {\r\n        setModalType(true)\r\n        setDetail(record)\r\n        LoadNShowModal()\r\n    }\r\n\r\n    const DeleteHandler = record => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestDeleteIndicatorMapping(record.id))\r\n    }\r\n    const AddNewHandler = () => {\r\n        setModalType(false)\r\n        LoadNShowModal()\r\n    }\r\n    const SaveHandler = (record) => {\r\n        const data = {\r\n            company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n            created_user: authUser,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestSaveIndicatorMapping(data))\r\n    }\r\n    const UpdateHandler = (record) => {\r\n        const data = {\r\n            id: detail.id,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestUpdateIndicatorMapping(data))\r\n    }\r\n\r\n    const ValidationAlert = errorInfo => {\r\n        // console.log(errorInfo)\r\n    }\r\n\r\n    const [dataSource, setDataSource] = useState([])\r\n    searcher = new FuzzySearch(indicatorMappingLists, [\"indicator_description_m.description\", \"indicator_m.indicator\",], { caseSensitive: false });\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            setDataSource(await indicatorMappingLists)\r\n        }\r\n        LoadData()\r\n    }, [indicatorMappingLists])\r\n    const OnSearch = (e) => setDataSource(searcher.search(e.target.value))\r\n    \r\n    return (\r\n        <div className=\"gx-main-content\">\r\n            <FormModal\r\n                children={\r\n                    <div>\r\n                        <LoadingProgress loading={loader} />\r\n                        {modalType ?\r\n                            <Edit detail={detail} onFinish={UpdateHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert}\r\n                                descriptionLists={descriptionLists}\r\n                                indicatorLists={indicatorLists}\r\n                            />\r\n                            :\r\n                            <Create onFinish={SaveHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert}\r\n                                descriptionLists={descriptionLists}\r\n                                indicatorLists={indicatorLists}\r\n                            />\r\n                        }\r\n                    </div>\r\n                }\r\n                title={modalType ? \"Edit\" : \"Create\"}\r\n                visible={modal}\r\n                width={600}\r\n                handleCancel={CloseModal}\r\n            />\r\n\r\n\r\n            <PageContent\r\n                OnSearch={OnSearch}\r\n                rowKey=\"id\"\r\n                dataSource={dataSource.map(item => {\r\n                    return {\r\n                        ...item,\r\n                        indicator: item.indicator_m ? item.indicator_m.indicator : FindName(indicatorLists, item.indicator_id).indicator,\r\n                        description: item.indicator_description_m ? item.indicator_description_m.description : FindName(descriptionLists, item.description_id).description,\r\n                    }\r\n                })}\r\n                AddNewHandler={AddNewHandler}\r\n                pageTitle=\"Indicator Mapping\"\r\n                placeholder=\"Search for Indicator Mapping\"\r\n                scroll={{ width: 700 }}\r\n                loading={{ spinning: loader, indicator: <LoadingProgress loading={loader} /> }}\r\n                addNewText=\"Indicator Mapping\"\r\n                columns={[\r\n                    {\r\n                        title: 'ID',\r\n                        dataIndex: 'id',\r\n                        key: 'id',\r\n                        width: 70,\r\n                        fixed: 'left',\r\n                    }, {\r\n                        title: 'Indicator ',\r\n                        dataIndex: 'indicator',\r\n                        key: 'indicator',\r\n                    }, {\r\n                        title: 'Description',\r\n                        dataIndex: 'description',\r\n                        key: 'description',\r\n                    }, {\r\n                        title: 'Value ',\r\n                        dataIndex: 'indicator_descvalue',\r\n                        key: 'indicator_descvalue',\r\n                    },\r\n                    {\r\n                        title: 'Action',\r\n                        key: 'action',\r\n                        fixed: 'right',\r\n                        width: 70,\r\n                        render: (text, record) => (\r\n                            <span >\r\n                                <Dropdown\r\n                                    //  disabled={sessionStorage.role === \"ADMIN\" ? false : true}\r\n                                    overlay={\r\n                                        (<Menu>\r\n                                            <Menu.Item key=\"1\">\r\n                                                <span className=\"gx-text-blue\" onClick={() => EditDataHandler(record)}>\r\n                                                    <EditOutlined /> Edit\r\n                                            </span>\r\n                                            </Menu.Item>\r\n                                            <Menu.Item key=\"2\">\r\n                                                <Popconfirm\r\n                                                    placement=\"top\"\r\n                                                    title={`Are you sure to delete ${record.indicator}?`}\r\n                                                    onConfirm={() => DeleteHandler(record)}\r\n                                                    onCancel={(e) => console.log(e)}\r\n                                                    okText=\"Yes\"\r\n                                                    cancelText=\"No\"\r\n                                                >\r\n                                                    <span className=\"gx-text-red\" >\r\n                                                        <DeleteOutlined /> Delete\r\n                                            </span>\r\n                                                </Popconfirm>\r\n\r\n                                            </Menu.Item>\r\n                                        </Menu>)\r\n                                    } placement=\"bottomRight\" trigger={['click']}>\r\n                                    <Button type=\"primary\" className=\"gx-bg-geekblue\"\r\n                                        shape=\"circle\"\r\n                                        icon={<MoreOutlined style={{ fontWeight: 700 }} />}\r\n                                        size=\"middle\" />\r\n                                </Dropdown>\r\n                            </span>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IndicatorMapping;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\Mapping\\Create.js",["567","568"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input, Select, InputNumber } from \"antd\"\r\nimport { SaveOutlined, } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\nconst { TextArea } = Input\r\nconst { Option } = Select\r\nconst Create = ({ onFinish, onFinishFailed, hideModalLoader, descriptionLists, indicatorLists }) => {\r\n\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Add\" onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n\r\n                <Form.Item label=\"Indicator\" name=\"indicator_id\"\r\n                    rules={[{ required: true, message: 'Please Select Indicator', },]}\r\n                >\r\n                    <Select showSearch placeholder=\"Select Indicator\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {indicatorLists && indicatorLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <Option key={item.id} value={item.id}>{item.indicator}</Option>\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Description\" name=\"description_id\"\r\n                    rules={[{ required: true, message: 'Please Select Description', },]}\r\n                >\r\n                    <Select showSearch placeholder=\"Select Description\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {descriptionLists && descriptionLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <Option key={item.id} value={item.id}>{item.description}</Option>\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Value\" name=\"indicator_descvalue\" >\r\n                    <InputNumber style={{ width: '100%' }} placeholder=\"Value\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 50 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Save\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Indicators\\Mapping\\Edit.js",["569","570"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input, Select, InputNumber } from \"antd\"\r\nimport { SaveOutlined, } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\nconst { TextArea } = Input\r\nconst { Option } = Select\r\nconst Edit = ({ detail, onFinish, onFinishFailed, hideModalLoader, indicatorLists, descriptionLists }) => {\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            indicator_id: detail.indicator_id,\r\n            description_id: detail.description_id,\r\n            indicator_descvalue: detail.indicator_descvalue,\r\n        });\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [detail])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Edit\" form={form} onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Indicator\" name=\"indicator_id\"\r\n                    rules={[{ required: true, message: 'Please Select Indicator', },]}\r\n                >\r\n                    <Select showSearch placeholder=\"Select Indicator\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {indicatorLists && indicatorLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                {detail.indicator_id === item.id ?\r\n                                    <Option selected value={detail.indicator_id} >{item.indicator}</Option>\r\n                                    : <Option key={item.id} value={item.id}>{item.indicator}</Option>}\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"Description\" name=\"description_id\"\r\n                    rules={[{ required: true, message: 'Please Select Description', },]}\r\n                >\r\n                    <Select showSearch placeholder=\"Select Description\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {descriptionLists && descriptionLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                {detail.description_id === item.id ?\r\n                                    <Option selected value={detail.description_id} >{item.description}</Option>\r\n                                    : <Option key={item.id} value={item.id}>{item.description}</Option>}\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Value\" name=\"indicator_descvalue\" >\r\n                    <InputNumber style={{ width: '100%' }} placeholder=\"Value\" />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 50 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Update\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Edit;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Profiler\\index.js",["571","572","573","574","575"],"import React, { useEffect, useState } from 'react';\r\nimport { Select, Row, Col, Tag, Button, message } from 'antd';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport Widget from \"components/Widget\";\r\nimport { requestGetCustomer } from \"appRedux/Actions/people\"\r\nimport {\r\n    requestGetIndicatorMapping, requestGetIndicatorType, requestSaveProfiler\r\n} from \"appRedux/Actions/indicator\"\r\nimport { showAuthLoader, hideAuthLoader, } from \"appRedux/Actions/common\"\r\n\r\nimport { requestGetStatus } from \"appRedux/Actions/status\"\r\nimport LoadingProgress from \"components/Loading\"\r\nimport { onAddItem, onItemExist, onUpdateItem, onRemoveAll } from \"utils/CartFunctions\"\r\nimport ProfileForm from \"./ProfileForm\"\r\nimport ProfileValueViewer from \"./ValueViewer\"\r\nimport _ from \"lodash\"\r\nconst { Option } = Select\r\nconst FindCustomer = (arrayList, value) => arrayList.find(item => item.customer_no === value)\r\nconst FindIndicator = (arrayList, value) => arrayList.find(item => parseInt(item.id) === parseInt(value))\r\nconst CustomerProfiler = () => {\r\n    const dispatch = useDispatch()\r\n    const [selectedCustomer, setSelectedCustomer] = useState(undefined)\r\n    const [selectedIndicator, setSelectedSetIndicator] = useState(undefined)\r\n    const [selectedIndicatorType, setSelectedIndicatorType] = useState(\"\")\r\n    const [state, setState] = useState({\r\n        profiler: []\r\n    })\r\n\r\n    const { loader } = useSelector(({ common }) => common);\r\n    const { user, authUser } = useSelector(({ auth }) => auth);\r\n    const { customerLists, } = useSelector(({ people }) => people);\r\n    const { statusLists, } = useSelector(({ statuses }) => statuses);\r\n    const { indicatorTypeLists } = useSelector(({ indicators }) => indicators);\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetCustomer({\r\n            del_flg: 0, company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n        }))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetIndicatorMapping({\r\n            del_flg: 0, company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n        }))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetIndicatorType({\r\n            del_flg: 0, company_id: user.company_id,\r\n            branch_id: user.branch_id,\r\n        }))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetStatus({ del_flg: 0, company_id: user.company_id }))\r\n    }, [])\r\n\r\n\r\n    const HandleCustomerSelect = value => {\r\n        const customer = FindCustomer(customerLists, value)\r\n        setSelectedCustomer(customer)\r\n    }\r\n\r\n    const HandleProfileTypeSelect = value => {\r\n        const indicator = FindIndicator(indicatorTypeLists, value)\r\n        setSelectedIndicatorType(indicator ? indicator.indicator_type : \"\")\r\n        setSelectedSetIndicator(indicator ? indicator.indicator_ms : [])\r\n    }\r\n\r\n    const InputSelectHandler = (value) => {\r\n        const indicator = _.find(selectedIndicator, { indicator_desc_mapping_ms: [{ id: value }] });\r\n        const inddesc = indicator.indicator_desc_mapping_ms.find(item => parseInt(item.id) === value)\r\n\r\n        const checkExists = onItemExist(state, inddesc)\r\n        if (checkExists) {\r\n            const updatedItem = onUpdateItem(state, inddesc)\r\n            setState(updatedItem)\r\n        } else {\r\n            const addedItem = onAddItem(state, inddesc)\r\n            setState(addedItem)\r\n        }\r\n    }\r\n\r\n    const PrepareSave = () => {\r\n        return state.profiler.map(item => {\r\n            return {\r\n                indicator_id: item.indicator_id,\r\n                description_id: item.description_id,\r\n                indicator_description_map_id: item.indicator_description_map_id,\r\n                description_value: item.indicator_descvalue,\r\n                customer_no: selectedCustomer.customer_no,\r\n                ACTION_TYPE: \"VERIFIED\",\r\n                company_id: user.company_id,\r\n                created_user: authUser,\r\n            }\r\n        })\r\n    }\r\n    const SaveCustomerProfilerHandler = () => {\r\n        if (_.isEmpty(selectedCustomer)) {\r\n            message.error('Select Customer');\r\n            return;\r\n        }\r\n        if (_.isEmpty(state.profiler)) {\r\n            message.error('Select Indications');\r\n            return;\r\n        }\r\n        const data = PrepareSave()\r\n        //  console.log(data)\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestSaveProfiler({ profiler: data }))\r\n        setSelectedCustomer(undefined)\r\n        setSelectedIndicatorType(\"\")\r\n        setSelectedSetIndicator(undefined)\r\n        const removed = onRemoveAll(state)\r\n        setState(removed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <LoadingProgress loading={loader} />\r\n            <Row>\r\n                <Col span={8}>\r\n                    <Row>\r\n                        <Col span={24}>\r\n                            <Widget styleName=\"gx-card-full\">\r\n                                <div className=\"gx-m-2\">\r\n                                    <h1 className={`gx-fs-xl gx-font-weight-bold gx-text-geekblue`}>Customer Info</h1>\r\n                                    <Select showSearch placeholder=\"Select Customer\" optionFilterProp=\"children\" allowClear\r\n                                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                                        style={{ width: '100%' }} onChange={HandleCustomerSelect} >\r\n                                        {customerLists && customerLists.map((item, index) => (\r\n                                            <React.Fragment key={index}>\r\n                                                <Option key={item.customer_no} value={item.customer_no}>{item.customer}</Option>\r\n                                            </React.Fragment>))}\r\n                                    </Select>\r\n                                </div>\r\n                                <div className=\"gx-ml-2 gx-mt-3\">\r\n                                    <p>Customer Name: <strong>{selectedCustomer ? selectedCustomer.customer : \"\"}</strong></p>\r\n                                    <p>Customer Number (CIF): <strong> {selectedCustomer ? selectedCustomer.customer_no : \"\"}</strong></p>\r\n                                    <p>Account Number: <strong> {selectedCustomer ? selectedCustomer.account_no : \"\"}</strong></p>\r\n                                    <p>Branch Name: <strong> {selectedCustomer ? selectedCustomer.branch_m.branch_name : \"\"}</strong></p>\r\n                                </div>\r\n                            </Widget>\r\n                        </Col>\r\n                        <Col span={24}>\r\n                            <Widget styleName=\"gx-card-full\">\r\n                                <div className=\"gx-m-2\">\r\n                                    <h1 className={`gx-fs-xl gx-font-weight-bold gx-text-geekblue`}>Profiler Type</h1>\r\n                                    <Select showSearch placeholder=\"Select Profiler Type\" optionFilterProp=\"children\" allowClear\r\n                                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                                        style={{ width: '100%' }} onChange={HandleProfileTypeSelect} >\r\n                                        {indicatorTypeLists && indicatorTypeLists.map((item, index) => (\r\n                                            <React.Fragment key={index}>\r\n                                                <Option key={item.id} value={item.id}>{item.indicator_type}</Option>\r\n                                            </React.Fragment>))}\r\n                                    </Select>\r\n                                </div>\r\n\r\n                            </Widget>\r\n                        </Col>\r\n                        <Col span={24}>\r\n                            <div >\r\n                                {\r\n                                    statusLists && _.sortBy(statusLists, \"rating_lower\").map((item, index) => (\r\n                                        <div style={{display:'flex',justifyContent:'space-between'}}>\r\n                                           <h1 className={`gx-fs-xl gx-font-weight-bold gx-text-geekblue`}> Above {item.rating_lower} to {item.rating_upper}:</h1>\r\n                                        <Tag key={index} className={`gx-text-${item.textColor} gx-bg-${item.bgColor} gx-fs-2xl`}>{item.status_name}\r\n                                       </Tag>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                            <ProfileValueViewer\r\n                                colorTitle={RatingCheck(statusLists, CalcProfValue(state.profiler)) ?\r\n                                    RatingCheck(statusLists, CalcProfValue(state.profiler)).textColor : \"geekblue\"}\r\n                                color={RatingCheck(statusLists, CalcProfValue(state.profiler)) ?\r\n                                    RatingCheck(statusLists, CalcProfValue(state.profiler)).bgColor : \"white\"}\r\n                                title={CalcProfValue(state.profiler)}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Col>\r\n                <Col span={16}>\r\n\r\n                    <Widget styleName=\"gx-card-full\" title={\r\n                        <h3 className=\" h3 gx-text-capitalize gx-fs-l gx-font-weight-bold gx-text-geekblue\">\r\n                            {selectedIndicatorType} RISK PROFILING TEMPLATE\r\n                             </h3>\r\n                    } extra={\r\n                        <Button type=\"primary\" onClick={SaveCustomerProfilerHandler}>\r\n                            Save\r\n                        </Button>\r\n                    }>\r\n                        <div className=\"gx-m-2\">\r\n                            {selectedIndicator ?\r\n                                selectedIndicator && selectedIndicator.map((item, index) => (\r\n                                    <React.Fragment key={index}>\r\n                                        <ProfileForm\r\n                                            label={item.indicator}\r\n                                            InputContent={item.indicator_desc_mapping_ms}\r\n                                            InputSelectHandler={InputSelectHandler}\r\n                                        />\r\n                                    </React.Fragment>\r\n                                ))\r\n                                : null}\r\n                        </div>\r\n                    </Widget>\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CalcProfValue = (profiler) => {\r\n    return profiler.reduce((a, c) => (a + (parseFloat(c.indicator_descvalue))), 0)\r\n}\r\n\r\n\r\nconst RatingCheck = (arrayList, value) => arrayList.find(item => parseInt(value) > parseInt(item.rating_lower) && parseInt(value) <= parseInt(item.rating_upper))\r\n\r\n\r\nexport default CustomerProfiler;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Branch\\index.js",["576"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { Button, Menu, Dropdown, Popconfirm } from \"antd\"\r\nimport { EditOutlined, MoreOutlined, DeleteOutlined } from \"@ant-design/icons\"\r\n\r\nimport PageContent from \"components/PageContent\"\r\nimport LoadingProgress from \"components/Loading\"\r\nimport FormModal from \"components/Modals\"\r\n\r\nimport Create from \"./Create\"\r\nimport Edit from \"./Edit\"\r\n\r\nimport { showAuthLoader, hideAuthLoader, showModal, hideModal } from \"appRedux/Actions/common\"\r\nimport { requestGetBranch, requestSaveBranch, requestDeleteBranch, requestUpdateBranch } from \"appRedux/Actions/auth\"\r\n\r\nimport FuzzySearch from 'fuzzy-search';\r\nlet searcher;\r\nconst Users = () => {\r\n    const dispatch = useDispatch()\r\n    const [modalType, setModalType] = useState(false)\r\n    const [detail, setDetail] = useState({})\r\n    const { modal, loader } = useSelector(({ common }) => common);\r\n    const { authUser, user, branchLists } = useSelector(({ auth }) => auth);\r\n\r\n    const LoadNShowModal = () => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(showModal())\r\n    }\r\n\r\n    const CloseModal = () => dispatch(hideModal())\r\n    const hideModalLoader = () => dispatch(hideAuthLoader())\r\n    const EditDataHandler = record => {\r\n        setModalType(true)\r\n        setDetail(record)\r\n        LoadNShowModal()\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetBranch({ del_flg: 0, company_id: user.company_id, }))\r\n    }, [])\r\n\r\n    const DeleteHandler = record => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestDeleteBranch(record.id))\r\n    }\r\n    const AddNewHandler = () => {\r\n        setModalType(false)\r\n        LoadNShowModal()\r\n    }\r\n    const SaveHandler = (record) => {\r\n        const data = {\r\n            company_id: user.company_id,\r\n            created_user: authUser,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestSaveBranch(data))\r\n    }\r\n    const UpdateHandler = (record) => {\r\n        const data = {\r\n            id: detail.id,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestUpdateBranch(data))\r\n    }\r\n\r\n    const ValidationAlert = errorInfo => {\r\n        // console.log(errorInfo)\r\n    }\r\n\r\n\r\n    const [dataSource, setDataSource] = useState([])\r\n    searcher = new FuzzySearch(branchLists, [\"branch_name\", \"telephone\", \"address\", \"email\",], { caseSensitive: false });\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            setDataSource(await branchLists)\r\n        }\r\n        LoadData()\r\n    }, [branchLists])\r\n    const OnSearch = (e) => setDataSource(searcher.search(e.target.value))\r\n\r\n    return (\r\n        <div className=\"gx-main-content\">\r\n            <FormModal\r\n                children={\r\n                    <div>\r\n                        <LoadingProgress loading={loader} />\r\n                        {modalType ?\r\n                            <Edit detail={detail} onFinish={UpdateHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert} />\r\n                            :\r\n                            <Create onFinish={SaveHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert} />\r\n                        }\r\n                    </div>\r\n                }\r\n                title={modalType ? \"Edit\" : \"Create\"}\r\n                visible={modal}\r\n                width={600}\r\n                handleCancel={CloseModal}\r\n            />\r\n\r\n            <PageContent\r\n                OnSearch={OnSearch}\r\n                rowKey=\"id\"\r\n                dataSource={dataSource}\r\n                AddNewHandler={AddNewHandler}\r\n                pageTitle=\"Branch\"\r\n                placeholder=\"Search for Branches\"\r\n                addNewText=\"Unit\"\r\n                scroll={{ width: 500 }}\r\n                columns={[\r\n                    {\r\n                        title: 'ID',\r\n                        dataIndex: 'id',\r\n                        key: 'id',\r\n                        width: 70,\r\n                        fixed: 'left',\r\n                    }, {\r\n                        title: 'Branch Name',\r\n                        dataIndex: 'branch_name',\r\n                        key: 'branch_name',\r\n                    }, {\r\n                        title: 'Telephone',\r\n                        dataIndex: 'telephone',\r\n                        key: 'telephone',\r\n                    }, {\r\n                        title: 'Branch Type',\r\n                        dataIndex: 'branch_type',\r\n                        key: 'branch_type',\r\n                    }, {\r\n                        title: 'Address',\r\n                        dataIndex: 'address',\r\n                        key: 'address',\r\n                    }, {\r\n                        title: 'Email',\r\n                        dataIndex: 'email',\r\n                        key: 'email',\r\n                    },\r\n                    {\r\n                        title: 'Action',\r\n                        key: 'action',\r\n                        fixed: 'right',\r\n                        width: 70,\r\n                        render: (text, record) => (\r\n                            <span >\r\n                                <Dropdown\r\n                                    //     disabled={sessionStorage.role === \"ADMIN\" ? false : true}\r\n                                    overlay={\r\n                                        (<Menu>\r\n                                            <Menu.Item key=\"1\">\r\n                                                <span className=\"gx-text-blue\" onClick={() => EditDataHandler(record)}>\r\n                                                    <EditOutlined /> Edit\r\n                                            </span>\r\n                                            </Menu.Item>\r\n                                            <Menu.Item key=\"2\">\r\n                                                <Popconfirm\r\n                                                    placement=\"top\"\r\n                                                    title={`Are you sure to delete ${record.supplier}?`}\r\n                                                    onConfirm={() => DeleteHandler(record)}\r\n                                                    onCancel={(e) => console.log(e)}\r\n                                                    okText=\"Yes\"\r\n                                                    cancelText=\"No\"\r\n                                                >\r\n                                                    <span className=\"gx-text-red\" >\r\n                                                        <DeleteOutlined /> Delete\r\n                                            </span>\r\n                                                </Popconfirm></Menu.Item>\r\n                                        </Menu>)\r\n                                    } placement=\"bottomRight\" trigger={['click']}>\r\n                                    <Button type=\"primary\" className=\"gx-bg-geekblue\"\r\n                                        shape=\"circle\"\r\n                                        icon={<MoreOutlined style={{ fontWeight: 700 }} />}\r\n                                        size=\"middle\" />\r\n                                </Dropdown>\r\n                            </span>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Users;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\ChangePassword\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Users\\index.js",["577","578","579"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { Button, Menu, Dropdown, Popconfirm } from \"antd\"\r\nimport { EditOutlined, MoreOutlined, DeleteOutlined } from \"@ant-design/icons\"\r\n\r\nimport PageContent from \"components/PageContent\"\r\nimport LoadingProgress from \"components/Loading\"\r\nimport FormModal from \"components/Modals\"\r\n\r\nimport Create from \"./Create\"\r\nimport Edit from \"./Edit\"\r\n\r\nimport { showAuthLoader, hideAuthLoader, showModal, hideModal } from \"appRedux/Actions/common\"\r\nimport {\r\n    requestGetUsers, requestGetBranch, requestGetRole,\r\n    requestSaveUser, requestUpdateUsers, requestDeleteUser\r\n} from \"appRedux/Actions/auth\"\r\n\r\nimport FuzzySearch from 'fuzzy-search';\r\nlet searcher;\r\nconst FindName = (dataLists, value) => dataLists.find(item => parseInt(item.id) === parseInt(value))\r\n\r\nconst Branch = () => {\r\n    const dispatch = useDispatch()\r\n    const [modalType, setModalType] = useState(false)\r\n    const [detail, setDetail] = useState({})\r\n    const { modal, loader } = useSelector(({ common }) => common);\r\n    const { authUser, user, userLists, branchLists, roleLists, userStatusLists } = useSelector(({ auth }) => auth);\r\n\r\n    const LoadNShowModal = () => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(showModal())\r\n    }\r\n\r\n    const CloseModal = () => dispatch(hideModal())\r\n    const hideModalLoader = () => dispatch(hideAuthLoader())\r\n    const EditDataHandler = record => {\r\n        setModalType(true)\r\n        setDetail(record)\r\n        LoadNShowModal()\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetUsers({ del_flg: 0, company_id: user.company_id, }))\r\n    }, [])\r\n    useEffect(() => {\r\n        dispatch(requestGetBranch({ del_flg: 0, company_id: user.company_id, }))\r\n    }, [])\r\n    useEffect(() => {\r\n        dispatch(requestGetRole({ del_flg: 0, company_id: user.company_id, }))\r\n    }, [])\r\n\r\n    const DeleteHandler = record => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestDeleteUser(record.id))\r\n    }\r\n    const AddNewHandler = () => {\r\n        setModalType(false)\r\n        LoadNShowModal()\r\n    }\r\n    const SaveHandler = (record) => {\r\n        const data = {\r\n            ...record,\r\n            company_id: user.company_id,\r\n            created_user: authUser,\r\n            password: '123456',\r\n\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestSaveUser(data))\r\n    }\r\n    const UpdateHandler = (record) => {\r\n        const data = {\r\n            id: detail.id,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestUpdateUsers(data))\r\n    }\r\n\r\n    const ValidationAlert = errorInfo => {\r\n        // console.log(errorInfo)\r\n    }\r\n\r\n\r\n    const [dataSource, setDataSource] = useState([])\r\n    searcher = new FuzzySearch(userLists, [\"fullname\", \"email\", \"telephone\", \"branch_m.branch_name\", \"role_m.role_name\",], { caseSensitive: false });\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            setDataSource(await userLists)\r\n        }\r\n        LoadData()\r\n    }, [userLists])\r\n    const OnSearch = (e) => setDataSource(searcher.search(e.target.value))\r\n\r\n    return (\r\n        <div className=\"gx-main-content\">\r\n            <FormModal\r\n                children={\r\n                    <div>\r\n                        <LoadingProgress loading={loader} />\r\n                        {modalType ?\r\n                            <Edit detail={detail} onFinish={UpdateHandler}\r\n                                branchLists={branchLists} roleLists={roleLists} userStatusLists={userStatusLists}\r\n                                hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert} />\r\n                            :\r\n                            <Create onFinish={SaveHandler}\r\n                                branchLists={branchLists} roleLists={roleLists} userStatusLists={userStatusLists}\r\n                                hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert} />\r\n                        }\r\n                    </div>\r\n                }\r\n                title={modalType ? \"Edit\" : \"Create\"}\r\n                visible={modal}\r\n                width={600}\r\n                handleCancel={CloseModal}\r\n            />\r\n\r\n            <PageContent\r\n                OnSearch={OnSearch}\r\n                rowKey=\"id\"\r\n                dataSource={dataSource.map(item => {\r\n                    return {\r\n                        ...item,\r\n                        role: item.role_m ? item.role_m.role_name : FindName(roleLists, item.role_id).role_name,\r\n                        branch: item.branch_m ? item.branch_m.branch_name : FindName(branchLists, item.branch_id).branch_name,\r\n                    }\r\n                })}\r\n                AddNewHandler={AddNewHandler}\r\n                pageTitle=\"Users\"\r\n                placeholder=\"Search for User\"\r\n                addNewText=\"User\"\r\n                scroll={{ width: 500 }}\r\n                columns={[\r\n                    {\r\n                        title: 'ID',\r\n                        dataIndex: 'id',\r\n                        key: 'id',\r\n                        width: 70,\r\n                        fixed: 'left',\r\n                    }, {\r\n                        title: 'Fullname',\r\n                        dataIndex: 'fullname',\r\n                        key: 'fullname',\r\n                    }, {\r\n                        title: 'Email',\r\n                        dataIndex: 'email',\r\n                        key: 'email',\r\n                    }, {\r\n                        title: 'Telephone',\r\n                        dataIndex: 'telephone',\r\n                        key: 'telephone',\r\n                    }, {\r\n                        title: 'Branch',\r\n                        dataIndex: 'branch',\r\n                        key: 'branch',\r\n                    }, {\r\n                        title: 'Role',\r\n                        dataIndex: 'role',\r\n                        key: 'role',\r\n                    }, {\r\n                        title: 'Status',\r\n                        dataIndex: 'user_status',\r\n                        key: 'user_status',\r\n                    },\r\n                    {\r\n                        title: 'Action',\r\n                        key: 'action',\r\n                        fixed: 'right',\r\n                        width: 70,\r\n                        render: (text, record) => (\r\n                            <span >\r\n                                <Dropdown\r\n                                    //     disabled={sessionStorage.role === \"ADMIN\" ? false : true}\r\n                                    overlay={\r\n                                        (<Menu>\r\n                                            <Menu.Item key=\"1\">\r\n                                                <span className=\"gx-text-blue\" onClick={() => EditDataHandler(record)}>\r\n                                                    <EditOutlined /> Edit\r\n                                            </span>\r\n                                            </Menu.Item>\r\n                                            <Menu.Item key=\"2\">\r\n                                                <Popconfirm\r\n                                                    placement=\"top\"\r\n                                                    title={`Are you sure to delete ${record.supplier}?`}\r\n                                                    onConfirm={() => DeleteHandler(record)}\r\n                                                    onCancel={(e) => console.log(e)}\r\n                                                    okText=\"Yes\"\r\n                                                    cancelText=\"No\"\r\n                                                >\r\n                                                    <span className=\"gx-text-red\" >\r\n                                                        <DeleteOutlined /> Delete\r\n                                            </span>\r\n                                                </Popconfirm></Menu.Item>\r\n                                        </Menu>)\r\n                                    } placement=\"bottomRight\" trigger={['click']}>\r\n                                    <Button type=\"primary\" className=\"gx-bg-geekblue\"\r\n                                        shape=\"circle\"\r\n                                        icon={<MoreOutlined style={{ fontWeight: 700 }} />}\r\n                                        size=\"middle\" />\r\n                                </Dropdown>\r\n                            </span>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Branch;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\ResetPassword\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\UserProfile\\index.js",["580"],"import React, { useEffect } from 'react';\r\nimport { Row, Col, Form, Input, Button } from 'antd'\r\nimport Widget from 'components/Widget';\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { showAuthLoader } from \"appRedux/Actions/common\"\r\n\r\nimport { requestUpdateUser } from \"appRedux/Actions/auth\"\r\n\r\n\r\nconst tailLayout = { wrapperCol: { offset: 8, span: 16, }, };\r\nconst UserProfile = () => {\r\n    const dispatch = useDispatch();\r\n    const { authUser, user } = useSelector(({ auth }) => auth);\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue({ fullname: user.fullname, email: user.email, role: user.role, branch: user.branch, telephone: user.telephone, });\r\n    }, [user])\r\n\r\n    const onFinish = values => {\r\n        dispatch(showAuthLoader());\r\n        const data = {\r\n            ...user,\r\n            ...values,\r\n            id: authUser,\r\n        }\r\n        // console.log(data)\r\n        dispatch(requestUpdateUser(data));\r\n    }\r\n    const onFinishFailed = values => {\r\n        // console.log(values)\r\n    }\r\n    return (\r\n        <div>\r\n            <Row justify=\"center\">\r\n                <Col span={12}>\r\n                    <Widget>\r\n                        <h1>Update Profile</h1>\r\n                        <Form name=\"Update Profile\" form={form} onFinish={onFinish} onFinishFailed={onFinishFailed}\r\n                            size=\"large\" labelCol={{ span: 6, }} wrapperCol={{ span: 16, }} >\r\n                            <Form.Item label=\"Fullname\" name=\"fullname\" hasFeedback rules={[{ required: true, message: 'Please Enter Fullname', },]}  >\r\n                                <Input placeholder=\"Fullname\" />\r\n                            </Form.Item>\r\n                            <Form.Item label=\"Email\" name=\"email\" hasFeedback rules={[{ required: true, message: 'Please Enter Email', },]} >\r\n                                <Input placeholder=\"Email\" />\r\n                            </Form.Item>\r\n                            <Form.Item label=\"Telephone\" name=\"telephone\" hasFeedback rules={[{ required: true, message: 'Please Enter Telephone', },]} >\r\n                                <Input placeholder=\"Telephone\" />\r\n                            </Form.Item>\r\n                            <Form.Item label=\"Role\" name=\"role\" hasFeedback>\r\n                                <Input placeholder=\"Role\" disabled />\r\n                            </Form.Item>\r\n                            <Form.Item label=\"Branch\" name=\"branch\" hasFeedback>\r\n                                <Input placeholder=\"branch\" disabled />\r\n                            </Form.Item>\r\n\r\n                            <Form.Item {...tailLayout}>\r\n                                <Button type=\"primary\" htmlType=\"submit\">\r\n                                    Update Profile</Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Widget>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default UserProfile;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Users\\Create.js",["581"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input, Select } from \"antd\"\r\nimport { SaveOutlined } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\nconst { Option } = Select\r\nconst Create = ({ onFinish, onFinishFailed, hideModalLoader, branchLists, roleLists, userStatusLists }) => {\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Add\" onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Branch\" name=\"branch_id\"\r\n                    rules={[{ required: true, message: 'Please Select Branch', },]}\r\n                >\r\n                    <Select key={2} showSearch placeholder=\"Select Branch\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {branchLists && branchLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <Option key={item.id} value={item.id}>{item.branch_name}</Option>\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"Fullname\" name=\"fullname\" hasFeedback rules={[{ required: true, message: 'Please Enter Fullname', },]}  >\r\n                    <Input placeholder=\"Fullname\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Email\" name=\"email\" hasFeedback rules={[{ required: true, message: 'Please Enter Email', },]} >\r\n                    <Input placeholder=\"Email\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Telephone\" name=\"telephone\" hasFeedback rules={[{ required: true, message: 'Please Enter Telephone', },]} >\r\n                    <Input placeholder=\"Telephone\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Role\" name=\"role_id\"\r\n                    rules={[{ required: true, message: 'Please Select Role', },]}\r\n                >\r\n                    <Select  showSearch  placeholder=\"Select Role\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {roleLists && roleLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <Option key={item.id} value={item.id}>{item.role_name}</Option>\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"User Status\" name=\"user_status\"\r\n                    rules={[{ required: true, message: 'Please Select User Status', },]}\r\n                >\r\n                    <Select  showSearch  placeholder=\"Select User Status\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {userStatusLists && userStatusLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <Option key={item} value={item}>{item}</Option>\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Save\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Branch\\Edit.js",["582"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input } from \"antd\"\r\nimport { SaveOutlined, PhoneFilled } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst { TextArea } = Input;\r\nconst Edit = ({ detail, onFinish, onFinishFailed, hideModalLoader }) => {\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            branch_name: detail.branch_name,\r\n            telephone: detail.telephone,\r\n            email: detail.email,\r\n            address: detail.address,\r\n            branch_type: detail.branch_type,\r\n        });\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [detail])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Edit\" form={form} onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Branch Name\" name=\"branch_name\"\r\n                    rules={[{ required: true, message: 'Please Enter Branch Name', },]}\r\n                >\r\n                    <Input placeholder=\"Branch Name\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Branch Type\" name=\"branch_type\"\r\n                    rules={[{ required: true, message: 'Please Enter Branch Type', },]}\r\n                >\r\n                    <Input placeholder=\"Branch Type\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Telephone\" name=\"telephone\"\r\n                    rules={[{ required: true, message: 'Please Enter Telephone', },]}\r\n                >\r\n                    <Input placeholder=\"Telephone\" addonBefore=\"+233\" suffix={<PhoneFilled />} />\r\n                </Form.Item>\r\n                <Form.Item label=\"Email\" name=\"email\" >\r\n                    <Input placeholder=\"Email\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Address\" name=\"address\"   >\r\n                    <TextArea allowClear placeholder=\"Address\" autoSize={{ minRows: 2, maxRows: 6 }} />\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Update\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Edit;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Branch\\Create.js",["583"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input } from \"antd\"\r\nimport { SaveOutlined,PhoneFilled } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst { TextArea } = Input;\r\nconst Create = ({ onFinish, onFinishFailed, hideModalLoader }) => {\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500); \r\n      \r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Add\" onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Branch Name\" name=\"branch_name\"\r\n                    rules={[{ required: true, message: 'Please Enter Branch Name', },]}\r\n                >\r\n                    <Input placeholder=\"Branch Name\" allowClear />\r\n                </Form.Item>\r\n               <Form.Item label=\"Branch Type\" name=\"branch_type\"\r\n                    rules={[{ required: true, message: 'Please Enter Branch Type', },]}\r\n                >\r\n                    <Input placeholder=\"Branch Type\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Telephone\" name=\"telephone\"\r\n                    rules={[{ required: true, message: 'Please Enter Telephone', },]}\r\n                >\r\n                    <Input placeholder=\"Telephone\" addonBefore=\"+233\" suffix={<PhoneFilled />} />\r\n                </Form.Item>\r\n                <Form.Item label=\"Email\" name=\"email\" >\r\n                    <Input placeholder=\"Email\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Address\" name=\"address\"   >\r\n                    <TextArea allowClear placeholder=\"Address\" autoSize={{ minRows: 2, maxRows: 6 }} />\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Save\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Users\\Edit.js",["584"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input, Select } from \"antd\"\r\nimport { SaveOutlined } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst { Option } = Select\r\nconst Edit = ({ detail, onFinish, onFinishFailed, hideModalLoader, branchLists, roleLists, userStatusLists }) => {\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            fullname: detail.fullname,\r\n            telephone: detail.telephone,\r\n            email: detail.email,\r\n            role_id: detail.role_id,\r\n            branch_id: detail.branch_id,\r\n            user_status: detail.user_status,\r\n        });\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [detail,])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Edit\" form={form} onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Branch\" name=\"branch_id\"\r\n                    rules={[{ required: true, message: 'Please Select Branch', },]}\r\n                >\r\n                    <Select key={2} showSearch placeholder=\"Select Branch\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {branchLists && branchLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                {detail.branch_id === item.id ?\r\n                                    <Option selected value={detail.branch_id} >{item.branch_name}</Option>\r\n                                    : <Option value={item.id}>{item.branch_name}</Option>}\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"Fullname\" name=\"fullname\" hasFeedback rules={[{ required: true, message: 'Please Enter Fullname', },]}  >\r\n                    <Input placeholder=\"Fullname\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Email\" name=\"email\" hasFeedback rules={[{ required: true, message: 'Please Enter Email', },]} >\r\n                    <Input placeholder=\"Email\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Telephone\" name=\"telephone\" hasFeedback rules={[{ required: true, message: 'Please Enter Telephone', },]} >\r\n                    <Input placeholder=\"Telephone\" />\r\n                </Form.Item>\r\n                <Form.Item label=\"Role\" name=\"role_id\"\r\n                    rules={[{ required: true, message: 'Please Select Role', },]}\r\n                >\r\n                    <Select showSearch placeholder=\"Select Role\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {roleLists && roleLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                {detail.role_id === item.id ?\r\n                                    <Option selected value={detail.role_id} >{item.role_name}</Option>\r\n                                    : <Option value={item.id}>{item.role_name}</Option>}\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item label=\"User Status\" name=\"user_status\"\r\n                    rules={[{ required: true, message: 'Please Select User Status', },]}\r\n                >\r\n                    <Select showSearch placeholder=\"Select User Status\" optionFilterProp=\"children\"\r\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                        style={{ width: '100%' }} >\r\n                        {userStatusLists && userStatusLists.map((item, index) => (\r\n                            <React.Fragment key={index}>\r\n                                <Option value={item}>{item}</Option>\r\n                            </React.Fragment>))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Update\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Edit;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\utils\\FindName.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Profiler\\ProfileForm.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\utils\\CartFunctions.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Profiler\\ValueViewer.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\reducers\\status.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\sagas\\status.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\api\\status.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\appRedux\\Actions\\status.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Statuses\\index.js",["585"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { Button, Menu, Dropdown, Popconfirm } from \"antd\"\r\nimport { EditOutlined, MoreOutlined, DeleteOutlined } from \"@ant-design/icons\"\r\n\r\nimport PageContent from \"components/PageContent\"\r\nimport LoadingProgress from \"components/Loading\"\r\nimport FormModal from \"components/Modals\"\r\n\r\nimport Create from \"./Create\"\r\nimport Edit from \"./Edit\"\r\n\r\nimport { showAuthLoader, hideAuthLoader, showModal, hideModal } from \"appRedux/Actions/common\"\r\nimport { requestSaveStatus, requestUpdateStatus, requestDeleteStatus, requestGetStatus } from \"appRedux/Actions/status\"\r\n\r\nimport FuzzySearch from 'fuzzy-search';\r\nlet searcher;\r\nconst Statuses = () => {\r\n    const dispatch = useDispatch()\r\n    const [modalType, setModalType] = useState(false)\r\n    const [detail, setDetail] = useState({})\r\n    const { statusLists } = useSelector(({ statuses }) => statuses);\r\n    const { modal, loader } = useSelector(({ common }) => common);\r\n    const { user } = useSelector(({ auth }) => auth);\r\n\r\n    const LoadNShowModal = () => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(showModal())\r\n    }\r\n\r\n    const CloseModal = () => dispatch(hideModal())\r\n    const hideModalLoader = () => dispatch(hideAuthLoader())\r\n    const EditDataHandler = record => {\r\n        setModalType(true)\r\n        setDetail(record)\r\n        LoadNShowModal()\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetStatus({ del_flg: 0, company_id: user.company_id }))\r\n    }, [])\r\n\r\n    const DeleteHandler = record => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestDeleteStatus(record.id))\r\n    }\r\n    const AddNewHandler = () => {\r\n        setModalType(false)\r\n        LoadNShowModal()\r\n    }\r\n    const SaveHandler = (record) => {\r\n        const data = {\r\n            company_id: user.company_id,\r\n            del_flg: 0,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestSaveStatus(data))\r\n    }\r\n    const UpdateHandler = (record) => {\r\n        const data = {\r\n            id: detail.id,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestUpdateStatus(data))\r\n    }\r\n\r\n    const ValidationAlert = errorInfo => {\r\n        // console.log(errorInfo)\r\n    }\r\n\r\n\r\n    const [dataSource, setDataSource] = useState([])\r\n    searcher = new FuzzySearch(statusLists, [\"name\"], { caseSensitive: false });\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            setDataSource(await statusLists)\r\n        }\r\n        LoadData()\r\n    }, [statusLists])\r\n    const OnSearch = (e) => setDataSource(searcher.search(e.target.value))\r\n\r\n    return (\r\n        <div className=\"gx-main-content\">\r\n            <FormModal\r\n                children={\r\n                    <div>\r\n                        <LoadingProgress loading={loader} />\r\n                        {modalType ?\r\n                            <Edit detail={detail} onFinish={UpdateHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert} />\r\n                            :\r\n                            <Create onFinish={SaveHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert} />\r\n                        }\r\n                    </div>\r\n                }\r\n                title={modalType ? \"Edit\" : \"Create\"}\r\n                visible={modal}\r\n                width={600}\r\n                handleCancel={CloseModal}\r\n            />\r\n\r\n            <PageContent\r\n                OnSearch={OnSearch}\r\n                rowKey=\"id\"\r\n                dataSource={dataSource}\r\n                AddNewHandler={AddNewHandler}\r\n                pageTitle=\"Statuses\"\r\n                placeholder=\"Search for Statuses\"\r\n                addNewText=\"Status\"\r\n                loading={{ spinning: loader, indicator: <LoadingProgress loading={loader} /> }}\r\n                scroll={{ width: 500 }}\r\n                columns={[\r\n                    {\r\n                        title: 'ID',\r\n                        dataIndex: 'id',\r\n                        key: 'id',\r\n                        width: 70,\r\n                        fixed: 'left',\r\n                    }, {\r\n                        title: 'Status',\r\n                        dataIndex: 'status_name',\r\n                        key: 'status_name',\r\n                    }, {\r\n                        title: 'Lower',\r\n                        dataIndex: 'rating_lower',\r\n                        key: 'rating_lower',\r\n                    }, {\r\n                        title: 'Upper',\r\n                        dataIndex: 'rating_upper',\r\n                        key: 'rating_upper',\r\n                    }, {\r\n                        title: 'BG Color',\r\n                        dataIndex: 'bgColor',\r\n                        key: 'bgColor',\r\n                    }, {\r\n                        title: 'Text Color',\r\n                        dataIndex: 'textColor',\r\n                        key: 'textColor',\r\n                    },\r\n                    {\r\n                        title: 'Action',\r\n                        key: 'action',\r\n                        fixed: 'right',\r\n                        width: 70,\r\n                        render: (text, record) => (\r\n                            <span >\r\n                                <Dropdown\r\n                                    //     disabled={sessionStorage.role === \"ADMIN\" ? false : true}\r\n                                    overlay={\r\n                                        (<Menu>\r\n                                            <Menu.Item key=\"1\">\r\n                                                <span className=\"gx-text-blue\" onClick={() => EditDataHandler(record)}>\r\n                                                    <EditOutlined /> Edit\r\n                                            </span>\r\n                                            </Menu.Item>\r\n                                            <Menu.Item key=\"2\">\r\n                                                <Popconfirm\r\n                                                    placement=\"top\"\r\n                                                    title={`Are you sure to delete ${record.name}?`}\r\n                                                    onConfirm={() => DeleteHandler(record)}\r\n                                                    onCancel={(e) => console.log(e)}\r\n                                                    okText=\"Yes\"\r\n                                                    cancelText=\"No\"\r\n                                                >\r\n                                                    <span className=\"gx-text-red\" >\r\n                                                        <DeleteOutlined /> Delete\r\n                                            </span>\r\n                                                </Popconfirm></Menu.Item>\r\n                                        </Menu>)\r\n                                    } placement=\"bottomRight\" trigger={['click']}>\r\n                                    <Button type=\"primary\" className=\"gx-bg-geekblue\"\r\n                                        shape=\"circle\"\r\n                                        icon={<MoreOutlined style={{ fontWeight: 700 }} />}\r\n                                        size=\"middle\" />\r\n                                </Dropdown>\r\n                            </span>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Statuses;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Statuses\\Create.js",["586"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input, InputNumber } from \"antd\"\r\nimport { SaveOutlined } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst Create = ({ onFinish, onFinishFailed, hideModalLoader }) => {\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Add\" onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Status\" name=\"status_name\"\r\n                    rules={[{ required: true, message: 'Please Enter Status', },]}\r\n                >\r\n                    <Input placeholder=\"Status\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Rating Lower\" name=\"rating_lower\"\r\n                    rules={[{ required: true, message: 'Please Enter Rating Lower', },]}\r\n                >\r\n                    <InputNumber style={{width:'100%'}} placeholder=\"Rating Lower\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Rating Upper\" name=\"rating_upper\"\r\n                    rules={[{ required: true, message: 'Please Enter Rating Upper', },]}\r\n                >\r\n                    <InputNumber style={{width:'100%'}} placeholder=\"Rating Upper\" allowClear />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"BG Color\" name=\"bgColor\"\r\n                    rules={[{ required: true, message: 'Please Enter Background Color', },]}\r\n                >\r\n                    <Input placeholder=\"BG Color\" allowClear />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Text Color\" name=\"textColor\"\r\n                    rules={[{ required: true, message: 'Please Enter Text Color', },]}\r\n                >\r\n                    <Input placeholder=\"Text Color\" allowClear />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Save\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Statuses\\Edit.js",["587"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input, InputNumber } from \"antd\"\r\nimport { SaveOutlined } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\nconst Edit = ({ detail, onFinish, onFinishFailed, hideModalLoader }) => {\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            status_name: detail.status_name,\r\n            rating_lower: detail.rating_lower,\r\n            rating_upper: detail.rating_upper,\r\n            bgColor: detail.bgColor,\r\n            textColor: detail.textColor,\r\n        });\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [detail])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Edit\" form={form} onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Status\" name=\"status_name\"\r\n                    rules={[{ required: true, message: 'Please Enter Status', },]}\r\n                >\r\n                    <Input placeholder=\"Status\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Rating Lower\" name=\"rating_lower\"\r\n                    rules={[{ required: true, message: 'Please Enter Rating Lower', },]}\r\n                >\r\n                    <InputNumber style={{ width: '100%' }} placeholder=\"Rating Lower\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Rating Upper\" name=\"rating_upper\"\r\n                    rules={[{ required: true, message: 'Please Enter Rating Upper', },]}\r\n                >\r\n                    <InputNumber style={{ width: '100%' }} placeholder=\"Rating Upper\" allowClear />\r\n                </Form.Item>\r\n                \r\n                <Form.Item label=\"BG Color\" name=\"bgColor\"\r\n                    rules={[{ required: true, message: 'Please Enter Background Color', },]}\r\n                >\r\n                    <Input placeholder=\"BG Color\" allowClear />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Text Color\" name=\"textColor\"\r\n                    rules={[{ required: true, message: 'Please Enter Text Color', },]}\r\n                >\r\n                    <Input placeholder=\"Text Color\" allowClear />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Update\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Edit;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Permissions\\index.js",["588"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { Button, Menu, Dropdown, Popconfirm } from \"antd\"\r\nimport { EditOutlined, MoreOutlined, DeleteOutlined } from \"@ant-design/icons\"\r\n\r\nimport PageContent from \"components/PageContent\"\r\nimport LoadingProgress from \"components/Loading\"\r\nimport FormModal from \"components/Modals\"\r\n\r\nimport Create from \"./Create\"\r\nimport Edit from \"./Edit\"\r\n\r\nimport { showAuthLoader, hideAuthLoader, showModal, hideModal } from \"appRedux/Actions/common\"\r\nimport { requestSavePermission, requestUpdatePermission, requestDeletePermission, requestGetPermission } from \"appRedux/Actions/auth\"\r\n\r\nimport FuzzySearch from 'fuzzy-search';\r\nlet searcher;\r\nconst Permissions = () => {\r\n    const dispatch = useDispatch()\r\n    const [modalType, setModalType] = useState(false)\r\n    const [detail, setDetail] = useState({})\r\n   \r\n    const { modal, loader } = useSelector(({ common }) => common);\r\n    const { user, authUser,permissionLists } = useSelector(({ auth }) => auth);\r\n\r\n    const LoadNShowModal = () => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(showModal())\r\n    }\r\n\r\n    const CloseModal = () => dispatch(hideModal())\r\n    const hideModalLoader = () => dispatch(hideAuthLoader())\r\n    const EditDataHandler = record => {\r\n        setModalType(true)\r\n        setDetail(record)\r\n        LoadNShowModal()\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetPermission({ del_flg: 0, company_id: user.company_id, }))\r\n    }, [])\r\n\r\n    const DeleteHandler = record => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestDeletePermission(record.id))\r\n    }\r\n    const AddNewHandler = () => {\r\n        setModalType(false)\r\n        LoadNShowModal()\r\n    }\r\n    const SaveHandler = (record) => {\r\n        const data = {\r\n            ...record,\r\n            company_id: user.company_id,\r\n            created_user: authUser,\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestSavePermission(data))\r\n    }\r\n    const UpdateHandler = (record) => {\r\n        const data = {\r\n            id: detail.id,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestUpdatePermission(data))\r\n    }\r\n\r\n    const ValidationAlert = errorInfo => {\r\n        // console.log(errorInfo)\r\n    }\r\n\r\n//console.log(permissionLists)\r\n    const [dataSource, setDataSource] = useState([])\r\n    searcher = new FuzzySearch(permissionLists, [\"permission\"], { caseSensitive: false });\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            setDataSource(await permissionLists)\r\n        }\r\n        LoadData()\r\n    }, [permissionLists])\r\n    const OnSearch = (e) => setDataSource(searcher.search(e.target.value))\r\n\r\n    return (\r\n        <div className=\"gx-main-content\">\r\n            <FormModal\r\n                children={\r\n                    <div>\r\n                        <LoadingProgress loading={loader} />\r\n                        {modalType ?\r\n                            <Edit detail={detail} onFinish={UpdateHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert} />\r\n                            :\r\n                            <Create onFinish={SaveHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert} />\r\n                        }\r\n                    </div>\r\n                }\r\n                title={modalType ? \"Edit\" : \"Create\"}\r\n                visible={modal}\r\n                width={600}\r\n                handleCancel={CloseModal}\r\n            />\r\n\r\n            <PageContent\r\n                OnSearch={OnSearch}\r\n                rowKey=\"id\"\r\n                dataSource={dataSource}\r\n                AddNewHandler={AddNewHandler}\r\n                pageTitle=\"Permissions\"\r\n                placeholder=\"Search for Permissions\"\r\n                addNewText=\"Permission\"\r\n                loading={{ spinning: loader, indicator: <LoadingProgress loading={loader} /> }}\r\n                scroll={{ width: 500 }}\r\n                columns={[\r\n                    {\r\n                        title: 'ID',\r\n                        dataIndex: 'id',\r\n                        key: 'id',\r\n                        width: 70,\r\n                        fixed: 'left',\r\n                    }, {\r\n                        title: 'Permission',\r\n                        dataIndex: 'permission',\r\n                        key: 'permission',\r\n                    }, {\r\n                        title: 'Description',\r\n                        dataIndex: 'description',\r\n                        key: 'description',\r\n                    }, {\r\n                        title: 'Type',\r\n                        dataIndex: 'perm_type',\r\n                        key: 'perm_type',\r\n                    },{\r\n                        title: 'Icon',\r\n                        dataIndex: 'perm_icon',\r\n                        key: 'perm_icon',\r\n                    },{\r\n                        title: 'Parent',\r\n                        dataIndex: 'perm_parent',\r\n                        key: 'perm_parent',\r\n                    },\r\n                    {\r\n                        title: 'Action',\r\n                        key: 'action',\r\n                        fixed: 'right',\r\n                        width: 70,\r\n                        render: (text, record) => (\r\n                            <span >\r\n                                <Dropdown\r\n                                    //     disabled={sessionStorage.role === \"ADMIN\" ? false : true}\r\n                                    overlay={\r\n                                        (<Menu>\r\n                                            <Menu.Item key=\"1\">\r\n                                                <span className=\"gx-text-blue\" onClick={() => EditDataHandler(record)}>\r\n                                                    <EditOutlined /> Edit\r\n                                            </span>\r\n                                            </Menu.Item>\r\n                                            <Menu.Item key=\"2\">\r\n                                                <Popconfirm\r\n                                                    placement=\"top\"\r\n                                                    title={`Are you sure to delete ${record.name}?`}\r\n                                                    onConfirm={() => DeleteHandler(record)}\r\n                                                    onCancel={(e) => console.log(e)}\r\n                                                    okText=\"Yes\"\r\n                                                    cancelText=\"No\"\r\n                                                >\r\n                                                    <span className=\"gx-text-red\" >\r\n                                                        <DeleteOutlined /> Delete\r\n                                            </span>\r\n                                                </Popconfirm></Menu.Item>\r\n                                        </Menu>)\r\n                                    } placement=\"bottomRight\" trigger={['click']}>\r\n                                    <Button type=\"primary\" className=\"gx-bg-geekblue\"\r\n                                        shape=\"circle\"\r\n                                        icon={<MoreOutlined style={{ fontWeight: 700 }} />}\r\n                                        size=\"middle\" />\r\n                                </Dropdown>\r\n                            </span>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Permissions;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Roles\\index.js",["589","590"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { Button, Menu, Dropdown, Popconfirm } from \"antd\"\r\nimport { EditOutlined, MoreOutlined, DeleteOutlined ,ScissorOutlined} from \"@ant-design/icons\"\r\n\r\nimport PageContent from \"components/PageContent\"\r\nimport LoadingProgress from \"components/Loading\"\r\nimport FormModal from \"components/Modals\"\r\n\r\nimport Create from \"./Create\"\r\nimport Edit from \"./Edit\"\r\nimport Permission from \"./Permission\"\r\n\r\nimport { showAuthLoader, hideAuthLoader, showModal, hideModal } from \"appRedux/Actions/common\"\r\nimport { requestSaveRole, requestUpdateRole, requestDeleteRole, requestGetRole, requestGetPermission } from \"appRedux/Actions/auth\"\r\n\r\nimport FuzzySearch from 'fuzzy-search';\r\nlet searcher;\r\nconst Roles = () => {\r\n    const dispatch = useDispatch()\r\n    const [modalType, setModalType] = useState(\"\")\r\n    const [detail, setDetail] = useState({})\r\n    const { modal, loader } = useSelector(({ common }) => common);\r\n    const { user, authUser, roleLists } = useSelector(({ auth }) => auth);\r\n    const [permissions, setPermissions] = useState([]);\r\n    const LoadNShowModal = () => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(showModal())\r\n    }\r\n\r\n    const CloseModal = () => dispatch(hideModal())\r\n    const hideModalLoader = () => dispatch(hideAuthLoader())\r\n    const PermissionDataHandler = record => {\r\n       // console.log(record)\r\n        setModalType(\"PERM\")\r\n        setDetail(record)\r\n        LoadNShowModal()\r\n    }\r\n    const EditDataHandler = record => {\r\n        setModalType(\"EDIT\")\r\n        setDetail(record)\r\n        LoadNShowModal()\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(requestGetRole({ company_id: user.company_id, del_flg: 0 }))\r\n    }, [])\r\n    useEffect(() => {\r\n        dispatch(requestGetPermission({ del_flg: 0, company_id: user.company_id, }))\r\n    }, [])\r\n\r\n    const DeleteHandler = record => {\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestDeleteRole(record.id))\r\n    }\r\n    const AddNewHandler = () => {\r\n        setModalType(\"ADD\")\r\n        LoadNShowModal()\r\n    }\r\n    const SaveHandler = (record) => {\r\n        const data = {\r\n            company_id: user.company_id,\r\n            created_user: authUser,\r\n            permissions,\r\n            ...record\r\n        }\r\n      //  console.log(data)\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestSaveRole(data))\r\n    }\r\n    const UpdateHandler = (record) => {\r\n        const data = {\r\n            id: detail.id,\r\n            updateRole:true,\r\n             company_id: user.company_id,\r\n            created_user: authUser,\r\n            ...record\r\n        }\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestUpdateRole(data))\r\n    }\r\n\r\n const UpdatePermissionsHandler = () => {\r\n        const data = {\r\n            id: detail.id,\r\n            updatePerm:true,\r\n            permissions,\r\n             company_id: user.company_id,\r\n            created_user: authUser,\r\n            ...detail\r\n        }\r\n      //  console.log(data)\r\n        dispatch(showAuthLoader())\r\n        dispatch(requestUpdateRole(data))\r\n    }\r\n\r\n    const ValidationAlert = errorInfo => {\r\n        // console.log(errorInfo)\r\n    }\r\n\r\n\r\n    const [dataSource, setDataSource] = useState([])\r\n    searcher = new FuzzySearch(roleLists, [\"role_name\"], { caseSensitive: false });\r\n    useEffect(() => {\r\n        const LoadData = async () => {\r\n            setDataSource(await roleLists)\r\n        }\r\n        LoadData()\r\n    }, [roleLists])\r\n    const OnSearch = (e) => setDataSource(searcher.search(e.target.value))\r\n\r\n    return (\r\n        <div className=\"gx-main-content\">\r\n            <FormModal\r\n                children={\r\n                    <div>\r\n                        <LoadingProgress loading={loader} />\r\n                        {modalType === \"EDIT\" ?\r\n                            <Edit detail={detail} onFinish={UpdateHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert} />\r\n                            :\r\n                            modalType === \"ADD\" ?\r\n                                <Create setPermissionsLists={setPermissions} onFinish={SaveHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert} />\r\n\r\n                                : <Permission setPermissionsLists={setPermissions} detail={detail} UpdatePermissionsHandler={UpdatePermissionsHandler} hideModalLoader={hideModalLoader} onFinishFailed={ValidationAlert} />\r\n                        }\r\n                    </div>\r\n                }\r\n                title={modalType === \"EDIT\" ? \"Edit\" : modalType === \"ADD\" ? \"Create\" : `Permissions for ${detail.role_name}`}\r\n                visible={modal}\r\n                width={900}\r\n                handleCancel={CloseModal}\r\n            />\r\n\r\n            <PageContent\r\n                OnSearch={OnSearch}\r\n                rowKey=\"id\"\r\n                dataSource={dataSource}\r\n                AddNewHandler={AddNewHandler}\r\n                pageTitle=\"Roles\"\r\n                placeholder=\"Search for Roles\"\r\n                addNewText=\"Role\"\r\n                loading={{ spinning: loader, indicator: <LoadingProgress loading={loader} /> }}\r\n                scroll={{ width: 500 }}\r\n                columns={[\r\n                    {\r\n                        title: 'ID',\r\n                        dataIndex: 'id',\r\n                        key: 'id',\r\n                        width: 70,\r\n                        fixed: 'left',\r\n                    }, {\r\n                        title: 'Role',\r\n                        dataIndex: 'role_name',\r\n                        key: 'role_name',\r\n                    },\r\n                    {\r\n                        title: 'Action',\r\n                        key: 'action',\r\n                        fixed: 'right',\r\n                        width: 70,\r\n                        render: (text, record) => (\r\n                            <span >\r\n                                <Dropdown\r\n                                    //     disabled={sessionStorage.role === \"ADMIN\" ? false : true}\r\n                                    overlay={\r\n                                        (<Menu>\r\n                                            <Menu.Item key=\"3\">\r\n                                                <span className=\"gx-text-blue\" onClick={() => PermissionDataHandler(record)}>\r\n                                                    <ScissorOutlined /> Permissions\r\n                                            </span>\r\n                                            </Menu.Item>\r\n                                            <Menu.Item key=\"1\">\r\n                                                <span className=\"gx-text-blue\" onClick={() => EditDataHandler(record)}>\r\n                                                    <EditOutlined /> Edit\r\n                                            </span>\r\n                                            </Menu.Item>\r\n                                            <Menu.Item key=\"2\">\r\n                                                <Popconfirm\r\n                                                    placement=\"top\"\r\n                                                    title={`Are you sure to delete ${record.name}?`}\r\n                                                    onConfirm={() => DeleteHandler(record)}\r\n                                                    onCancel={(e) => console.log(e)}\r\n                                                    okText=\"Yes\"\r\n                                                    cancelText=\"No\"\r\n                                                >\r\n                                                    <span className=\"gx-text-red\" >\r\n                                                        <DeleteOutlined /> Delete\r\n                                            </span>\r\n                                                </Popconfirm></Menu.Item>\r\n                                        </Menu>)\r\n                                    } placement=\"bottomRight\" trigger={['click']}>\r\n                                    <Button type=\"primary\" className=\"gx-bg-geekblue\"\r\n                                        shape=\"circle\"\r\n                                        icon={<MoreOutlined style={{ fontWeight: 700 }} />}\r\n                                        size=\"middle\" />\r\n                                </Dropdown>\r\n                            </span>\r\n                        ),\r\n                    },\r\n                ]}\r\n            />\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Roles;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Permissions\\Create.js",["591"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input } from \"antd\"\r\nimport { SaveOutlined } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst Create = ({ onFinish, onFinishFailed, hideModalLoader }) => {\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Add\" onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Permission\" name=\"permission\"\r\n                    rules={[{ required: true, message: 'Please Enter Permission', },]}\r\n                >\r\n                    <Input placeholder=\"Permission\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Description\" name=\"description\"\r\n                    rules={[{ required: true, message: 'Please Enter Description', },]}\r\n                >\r\n                    <Input placeholder=\"Description\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Type\" name=\"perm_type\"\r\n                    rules={[{ required: true, message: 'Please Enter Type', },]}\r\n                >\r\n                    <Input placeholder=\"Type\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Icon Name\" name=\"perm_icon\"  >\r\n                    <Input placeholder=\"Icon Name\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Parent\" name=\"perm_parent\" >\r\n                    <Input placeholder=\"Parent\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Save\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Roles\\Create.js",["592"],"import React, { useEffect, useState } from 'react';\r\nimport { Form, Button, Input } from \"antd\"\r\nimport { SaveOutlined } from \"@ant-design/icons\"\r\n\r\nimport TransferComponent from \"components/Transfer\"\r\nimport { useSelector } from 'react-redux';\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\n\r\nconst Create = ({ setPermissionsLists, onFinish, onFinishFailed, hideModalLoader }) => {\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n\r\n    }, [])\r\n    const { permissionLists } = useSelector(({ auth }) => auth);\r\n    const [permissions, setPermissions] = useState([]);\r\n    const onChange = (nextTargetKeys) => {\r\n        setPermissions(nextTargetKeys);\r\n        setPermissionsLists(nextTargetKeys)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Add\" onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Role Name\" name=\"role_name\"\r\n                    rules={[{ required: true, message: 'Please Enter Role Name', },]}\r\n                >\r\n                    <Input placeholder=\"Role Name\" allowClear />\r\n                </Form.Item>\r\n\r\n                <TransferComponent\r\n                    titles={['Permissions', 'Role Permission']}\r\n                    data={permissionLists && permissionLists.map(item => {\r\n                        return {\r\n                            ...item,\r\n                            key: item.id\r\n                        }\r\n                    })}\r\n                    targetKeys={permissions}\r\n                    handleChange={onChange}\r\n                />\r\n\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Save\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Create;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Permissions\\Edit.js",["593"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input } from \"antd\"\r\nimport { SaveOutlined } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\nconst Edit = ({ detail, onFinish, onFinishFailed, hideModalLoader }) => {\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            permission: detail.permission,\r\n            description: detail.description,\r\n            perm_type: detail.perm_type,\r\n            perm_icon: detail.perm_icon,\r\n            perm_parent: detail.perm_parent,\r\n        });\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [detail])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Edit\" form={form} onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Permission\" name=\"permission\"\r\n                    rules={[{ required: true, message: 'Please Enter Permission', },]}\r\n                >\r\n                    <Input placeholder=\"Permission\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Description\" name=\"description\"\r\n                    rules={[{ required: true, message: 'Please Enter Description', },]}\r\n                >\r\n                    <Input placeholder=\"Description\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Type\" name=\"perm_type\"\r\n                    rules={[{ required: true, message: 'Please Enter Type', },]}\r\n                >\r\n                    <Input placeholder=\"Type\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item label=\"Icon Name\" name=\"perm_icon\"   \r\n                >\r\n                    <Input placeholder=\"Icon Name\" allowClear />\r\n                </Form.Item>\r\n              <Form.Item label=\"Parent\" name=\"perm_parent\"\r\n                >\r\n                    <Input placeholder=\"Parent\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Update\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Edit;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Roles\\Edit.js",["594"],"import React, { useEffect } from 'react';\r\nimport { Form, Button, Input } from \"antd\"\r\nimport { SaveOutlined } from \"@ant-design/icons\"\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 12,\r\n        span: 12,\r\n    },\r\n};\r\nconst Edit = ({ detail, onFinish, onFinishFailed, hideModalLoader }) => {\r\n    const [form] = Form.useForm();\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            role_name: detail.role_name,\r\n        });\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n    }, [detail])\r\n\r\n    return (\r\n        <div>\r\n            <Form name=\"Edit\" form={form} onFinish={onFinish} onFinishFailed={onFinishFailed} size=\"large\"\r\n                labelCol={{ span: 6, }} wrapperCol={{ span: 16, }}>\r\n                <Form.Item label=\"Role Name\" name=\"role_name\"\r\n                    rules={[{ required: true, message: 'Please Enter Role Name', },]}\r\n                >\r\n                    <Input placeholder=\"Role Name\" allowClear />\r\n                </Form.Item>\r\n                <Form.Item {...tailLayout} style={{ display: 'flex', justifyContent: 'center', marginTop: 40 }}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        <SaveOutlined />  Update\r\n                 </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Edit;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Setups\\Roles\\Permission.js",["595"],"import React, { useEffect, useState, } from 'react';\r\nimport TransferComponent from \"components/Transfer\"\r\n\r\nimport { SaveOutlined } from \"@ant-design/icons\"\r\nimport {  Button,  } from \"antd\"\r\nimport { useSelector } from 'react-redux';\r\nconst Permission = ({ detail, hideModalLoader,UpdatePermissionsHandler,setPermissionsLists }) => {\r\n    const { permissionLists } = useSelector(({ auth }) => auth);\r\n    const [permissions, setPermissions] = useState([]);\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            hideModalLoader()\r\n        }, 1500);\r\n\r\n    }, [])\r\n    useEffect(() => {\r\n        setPermissions(detail.role_permission_ms &&detail.role_permission_ms.map(item=>{\r\n            return item.permission_id\r\n        }))\r\n      \r\n    }, [detail])\r\n    const onChange = (nextTargetKeys) => {\r\n        setPermissions(nextTargetKeys);\r\n         setPermissionsLists(nextTargetKeys)\r\n    };\r\n\r\n//console.log(permissions)\r\n    return (\r\n        <div>\r\n                <TransferComponent\r\n                    titles={['Permissions', 'Role Permission']}\r\n                    data={permissionLists && permissionLists.map(item => {\r\n                        return {\r\n                            ...item,\r\n                            key: item.id\r\n                        }\r\n                    })}\r\n                    targetKeys={permissions}\r\n                    handleChange={onChange}\r\n                />\r\n        \r\n            <div>\r\n               <Button type=\"primary\" onClick={UpdatePermissionsHandler}>\r\n                        <SaveOutlined />  Update\r\n                 </Button>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Permission;","C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\Transfer\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Reports\\index.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Reports\\Summary\\index.js",["596","597"],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Reports\\PrintPage.js",[],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\components\\PdfReports\\ReportHeader\\index.js",["598","599"],"C:\\Users\\chip-ethereum\\Desktop\\React Example Projects\\risk-profiler\\src\\pages\\Dashboard\\card.js",[],{"ruleId":"600","replacedBy":"601"},{"ruleId":"602","replacedBy":"603"},{"ruleId":"604","severity":1,"message":"605","line":1,"column":17,"nodeType":"606","messageId":"607","endLine":1,"endColumn":26},{"ruleId":"604","severity":1,"message":"608","line":7,"column":5,"nodeType":"606","messageId":"607","endLine":7,"endColumn":22},{"ruleId":"604","severity":1,"message":"609","line":7,"column":24,"nodeType":"606","messageId":"607","endLine":7,"endColumn":36},{"ruleId":"604","severity":1,"message":"610","line":7,"column":38,"nodeType":"606","messageId":"607","endLine":7,"endColumn":50},{"ruleId":"604","severity":1,"message":"611","line":7,"column":52,"nodeType":"606","messageId":"607","endLine":7,"endColumn":74},{"ruleId":"604","severity":1,"message":"612","line":8,"column":5,"nodeType":"606","messageId":"607","endLine":8,"endColumn":18},{"ruleId":"604","severity":1,"message":"613","line":8,"column":20,"nodeType":"606","messageId":"607","endLine":8,"endColumn":37},{"ruleId":"604","severity":1,"message":"614","line":8,"column":39,"nodeType":"606","messageId":"607","endLine":8,"endColumn":58},{"ruleId":"604","severity":1,"message":"615","line":8,"column":60,"nodeType":"606","messageId":"607","endLine":8,"endColumn":77},{"ruleId":"604","severity":1,"message":"616","line":8,"column":79,"nodeType":"606","messageId":"607","endLine":8,"endColumn":91},{"ruleId":"604","severity":1,"message":"617","line":8,"column":93,"nodeType":"606","messageId":"607","endLine":8,"endColumn":105},{"ruleId":"604","severity":1,"message":"618","line":9,"column":5,"nodeType":"606","messageId":"607","endLine":9,"endColumn":27},{"ruleId":"604","severity":1,"message":"619","line":9,"column":29,"nodeType":"606","messageId":"607","endLine":9,"endColumn":46},{"ruleId":"604","severity":1,"message":"620","line":9,"column":48,"nodeType":"606","messageId":"607","endLine":9,"endColumn":68},{"ruleId":"604","severity":1,"message":"621","line":10,"column":5,"nodeType":"606","messageId":"607","endLine":10,"endColumn":20},{"ruleId":"604","severity":1,"message":"622","line":10,"column":22,"nodeType":"606","messageId":"607","endLine":10,"endColumn":39},{"ruleId":"604","severity":1,"message":"623","line":10,"column":41,"nodeType":"606","messageId":"607","endLine":10,"endColumn":53},{"ruleId":"604","severity":1,"message":"624","line":10,"column":55,"nodeType":"606","messageId":"607","endLine":10,"endColumn":70},{"ruleId":"604","severity":1,"message":"625","line":10,"column":72,"nodeType":"606","messageId":"607","endLine":10,"endColumn":90},{"ruleId":"604","severity":1,"message":"626","line":10,"column":92,"nodeType":"606","messageId":"607","endLine":10,"endColumn":108},{"ruleId":"604","severity":1,"message":"627","line":11,"column":5,"nodeType":"606","messageId":"607","endLine":11,"endColumn":24},{"ruleId":"604","severity":1,"message":"628","line":11,"column":26,"nodeType":"606","messageId":"607","endLine":11,"endColumn":45},{"ruleId":"604","severity":1,"message":"629","line":11,"column":47,"nodeType":"606","messageId":"607","endLine":11,"endColumn":59},{"ruleId":"604","severity":1,"message":"630","line":11,"column":61,"nodeType":"606","messageId":"607","endLine":11,"endColumn":73},{"ruleId":"604","severity":1,"message":"631","line":12,"column":5,"nodeType":"606","messageId":"607","endLine":12,"endColumn":21},{"ruleId":"604","severity":1,"message":"632","line":12,"column":23,"nodeType":"606","messageId":"607","endLine":12,"endColumn":36},{"ruleId":"604","severity":1,"message":"633","line":12,"column":38,"nodeType":"606","messageId":"607","endLine":12,"endColumn":57},{"ruleId":"604","severity":1,"message":"634","line":12,"column":59,"nodeType":"606","messageId":"607","endLine":12,"endColumn":75},{"ruleId":"604","severity":1,"message":"635","line":12,"column":77,"nodeType":"606","messageId":"607","endLine":12,"endColumn":89},{"ruleId":"604","severity":1,"message":"636","line":12,"column":91,"nodeType":"606","messageId":"607","endLine":12,"endColumn":103},{"ruleId":"604","severity":1,"message":"637","line":12,"column":105,"nodeType":"606","messageId":"607","endLine":12,"endColumn":117},{"ruleId":"604","severity":1,"message":"638","line":32,"column":7,"nodeType":"606","messageId":"607","endLine":32,"endColumn":14},{"ruleId":"639","severity":1,"message":"640","line":56,"column":8,"nodeType":"641","endLine":56,"endColumn":10,"suggestions":"642"},{"ruleId":"639","severity":1,"message":"640","line":39,"column":8,"nodeType":"641","endLine":39,"endColumn":10,"suggestions":"643"},{"ruleId":"604","severity":1,"message":"605","line":1,"column":17,"nodeType":"606","messageId":"607","endLine":1,"endColumn":26},{"ruleId":"604","severity":1,"message":"644","line":13,"column":10,"nodeType":"606","messageId":"607","endLine":13,"endColumn":24},{"ruleId":"604","severity":1,"message":"645","line":14,"column":8,"nodeType":"606","messageId":"607","endLine":14,"endColumn":14},{"ruleId":"604","severity":1,"message":"646","line":16,"column":10,"nodeType":"606","messageId":"607","endLine":16,"endColumn":17},{"ruleId":"604","severity":1,"message":"647","line":29,"column":11,"nodeType":"606","messageId":"607","endLine":29,"endColumn":19},{"ruleId":"604","severity":1,"message":"648","line":31,"column":13,"nodeType":"606","messageId":"607","endLine":31,"endColumn":17},{"ruleId":"604","severity":1,"message":"649","line":33,"column":24,"nodeType":"606","messageId":"607","endLine":33,"endColumn":37},{"ruleId":"639","severity":1,"message":"650","line":34,"column":8,"nodeType":"641","endLine":34,"endColumn":10,"suggestions":"651"},{"ruleId":"639","severity":1,"message":"640","line":37,"column":8,"nodeType":"641","endLine":37,"endColumn":10,"suggestions":"652"},{"ruleId":"604","severity":1,"message":"653","line":4,"column":10,"nodeType":"606","messageId":"607","endLine":4,"endColumn":21},{"ruleId":"639","severity":1,"message":"654","line":21,"column":8,"nodeType":"641","endLine":21,"endColumn":10,"suggestions":"655"},{"ruleId":"639","severity":1,"message":"656","line":28,"column":8,"nodeType":"641","endLine":28,"endColumn":16,"suggestions":"657"},{"ruleId":"639","severity":1,"message":"650","line":32,"column":8,"nodeType":"641","endLine":32,"endColumn":10,"suggestions":"658"},{"ruleId":"639","severity":1,"message":"650","line":32,"column":8,"nodeType":"641","endLine":32,"endColumn":10,"suggestions":"659"},{"ruleId":"639","severity":1,"message":"654","line":22,"column":8,"nodeType":"641","endLine":22,"endColumn":10,"suggestions":"660"},{"ruleId":"639","severity":1,"message":"656","line":26,"column":8,"nodeType":"641","endLine":26,"endColumn":16,"suggestions":"661"},{"ruleId":"639","severity":1,"message":"656","line":21,"column":8,"nodeType":"641","endLine":21,"endColumn":16,"suggestions":"662"},{"ruleId":"639","severity":1,"message":"654","line":20,"column":8,"nodeType":"641","endLine":20,"endColumn":10,"suggestions":"663"},{"ruleId":"639","severity":1,"message":"650","line":33,"column":8,"nodeType":"641","endLine":33,"endColumn":10,"suggestions":"664"},{"ruleId":"639","severity":1,"message":"650","line":39,"column":8,"nodeType":"641","endLine":39,"endColumn":10,"suggestions":"665"},{"ruleId":"639","severity":1,"message":"654","line":19,"column":8,"nodeType":"641","endLine":19,"endColumn":10,"suggestions":"666"},{"ruleId":"639","severity":1,"message":"656","line":23,"column":8,"nodeType":"641","endLine":23,"endColumn":16,"suggestions":"667"},{"ruleId":"639","severity":1,"message":"650","line":38,"column":8,"nodeType":"641","endLine":38,"endColumn":10,"suggestions":"668"},{"ruleId":"639","severity":1,"message":"650","line":45,"column":8,"nodeType":"641","endLine":45,"endColumn":10,"suggestions":"669"},{"ruleId":"639","severity":1,"message":"650","line":52,"column":8,"nodeType":"641","endLine":52,"endColumn":10,"suggestions":"670"},{"ruleId":"604","severity":1,"message":"671","line":10,"column":9,"nodeType":"606","messageId":"607","endLine":10,"endColumn":17},{"ruleId":"639","severity":1,"message":"654","line":19,"column":8,"nodeType":"641","endLine":19,"endColumn":10,"suggestions":"672"},{"ruleId":"604","severity":1,"message":"671","line":10,"column":9,"nodeType":"606","messageId":"607","endLine":10,"endColumn":17},{"ruleId":"639","severity":1,"message":"656","line":23,"column":8,"nodeType":"641","endLine":23,"endColumn":16,"suggestions":"673"},{"ruleId":"604","severity":1,"message":"674","line":11,"column":26,"nodeType":"606","messageId":"607","endLine":11,"endColumn":40},{"ruleId":"639","severity":1,"message":"650","line":42,"column":8,"nodeType":"641","endLine":42,"endColumn":10,"suggestions":"675"},{"ruleId":"639","severity":1,"message":"650","line":49,"column":8,"nodeType":"641","endLine":49,"endColumn":10,"suggestions":"676"},{"ruleId":"639","severity":1,"message":"650","line":56,"column":8,"nodeType":"641","endLine":56,"endColumn":10,"suggestions":"677"},{"ruleId":"639","severity":1,"message":"640","line":60,"column":8,"nodeType":"641","endLine":60,"endColumn":10,"suggestions":"678"},{"ruleId":"639","severity":1,"message":"640","line":41,"column":8,"nodeType":"641","endLine":41,"endColumn":10,"suggestions":"679"},{"ruleId":"639","severity":1,"message":"640","line":46,"column":8,"nodeType":"641","endLine":46,"endColumn":10,"suggestions":"680"},{"ruleId":"639","severity":1,"message":"640","line":49,"column":8,"nodeType":"641","endLine":49,"endColumn":10,"suggestions":"681"},{"ruleId":"639","severity":1,"message":"640","line":52,"column":8,"nodeType":"641","endLine":52,"endColumn":10,"suggestions":"682"},{"ruleId":"639","severity":1,"message":"683","line":21,"column":8,"nodeType":"641","endLine":21,"endColumn":14,"suggestions":"684"},{"ruleId":"639","severity":1,"message":"654","line":17,"column":8,"nodeType":"641","endLine":17,"endColumn":10,"suggestions":"685"},{"ruleId":"639","severity":1,"message":"656","line":25,"column":8,"nodeType":"641","endLine":25,"endColumn":16,"suggestions":"686"},{"ruleId":"639","severity":1,"message":"654","line":18,"column":8,"nodeType":"641","endLine":18,"endColumn":10,"suggestions":"687"},{"ruleId":"639","severity":1,"message":"656","line":26,"column":8,"nodeType":"641","endLine":26,"endColumn":17,"suggestions":"688"},{"ruleId":"639","severity":1,"message":"640","line":42,"column":8,"nodeType":"641","endLine":42,"endColumn":10,"suggestions":"689"},{"ruleId":"639","severity":1,"message":"654","line":17,"column":8,"nodeType":"641","endLine":17,"endColumn":10,"suggestions":"690"},{"ruleId":"639","severity":1,"message":"656","line":22,"column":8,"nodeType":"641","endLine":22,"endColumn":16,"suggestions":"691"},{"ruleId":"639","severity":1,"message":"640","line":42,"column":8,"nodeType":"641","endLine":42,"endColumn":10,"suggestions":"692"},{"ruleId":"639","severity":1,"message":"640","line":48,"column":8,"nodeType":"641","endLine":48,"endColumn":10,"suggestions":"693"},{"ruleId":"639","severity":1,"message":"640","line":51,"column":8,"nodeType":"641","endLine":51,"endColumn":10,"suggestions":"694"},{"ruleId":"639","severity":1,"message":"654","line":17,"column":8,"nodeType":"641","endLine":17,"endColumn":10,"suggestions":"695"},{"ruleId":"639","severity":1,"message":"654","line":20,"column":8,"nodeType":"641","endLine":20,"endColumn":10,"suggestions":"696"},{"ruleId":"639","severity":1,"message":"656","line":23,"column":8,"nodeType":"641","endLine":23,"endColumn":16,"suggestions":"697"},{"ruleId":"639","severity":1,"message":"656","line":19,"column":8,"nodeType":"641","endLine":19,"endColumn":16,"suggestions":"698"},{"ruleId":"639","severity":1,"message":"654","line":15,"column":8,"nodeType":"641","endLine":15,"endColumn":10,"suggestions":"699"},{"ruleId":"604","severity":1,"message":"674","line":10,"column":26,"nodeType":"606","messageId":"607","endLine":10,"endColumn":40},{"ruleId":"639","severity":1,"message":"640","line":24,"column":8,"nodeType":"641","endLine":24,"endColumn":10,"suggestions":"700"},{"ruleId":"639","severity":1,"message":"640","line":10,"column":87,"nodeType":"641","endLine":10,"endColumn":89,"suggestions":"701"},{"ruleId":"604","severity":1,"message":"702","line":12,"column":11,"nodeType":"606","messageId":"607","endLine":12,"endColumn":21},"no-native-reassign",["703"],"no-negated-in-lhs",["704"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'DashboardOutlined' is defined but never used.","'UserOutlined' is defined but never used.","'DiffOutlined' is defined but never used.","'DeploymentUnitOutlined' is defined but never used.","'AuditOutlined' is defined but never used.","'ApartmentOutlined' is defined but never used.","'AppstoreAddOutlined' is defined but never used.","'ContainerOutlined' is defined but never used.","'BankOutlined' is defined but never used.","'ShopOutlined' is defined but never used.","'ReconciliationOutlined' is defined but never used.","'TrademarkOutlined' is defined but never used.","'UsergroupAddOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'LineChartOutlined' is defined but never used.","'SwapOutlined' is defined but never used.","'UngroupOutlined' is defined but never used.","'SplitCellsOutlined' is defined but never used.","'ScheduleOutlined' is defined but never used.","'ClockCircleOutlined' is defined but never used.","'WeiboSquareOutlined' is defined but never used.","'GoldOutlined' is defined but never used.","'BookOutlined' is defined but never used.","'DotChartOutlined' is defined but never used.","'PoundOutlined' is defined but never used.","'AccountBookOutlined' is defined but never used.","'BarChartOutlined' is defined but never used.","'RiseOutlined' is defined but never used.","'FundOutlined' is defined but never used.","'FallOutlined' is defined but never used.","'SubMenu' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'user.company_id'. Either include them or remove the dependency array.","ArrayExpression",["705"],["706"],"'showAuthLoader' is defined but never used.","'moment' is defined but never used.","'orderBy' is defined but never used.","'dispatch' is assigned a value but never used.","'user' is assigned a value but never used.","'setDataSource' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'user.branch_id', and 'user.company_id'. Either include them or remove the dependency array.",["707"],["708"],"'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'hideModalLoader'. Either include it or remove the dependency array. If 'hideModalLoader' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["709"],"React Hook useEffect has missing dependencies: 'form' and 'hideModalLoader'. Either include them or remove the dependency array. If 'hideModalLoader' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["710"],["711"],["712"],["713"],["714"],["715"],["716"],["717"],["718"],["719"],["720"],["721"],["722"],["723"],"'TextArea' is assigned a value but never used.",["724"],["725"],"'hideAuthLoader' is defined but never used.",["726"],["727"],["728"],["729"],["730"],["731"],["732"],["733"],"React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["734"],["735"],["736"],["737"],["738"],["739"],["740"],["741"],["742"],["743"],["744"],["745"],["746"],["747"],["748"],["749"],["750"],["751"],"'FindBranch' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"752","fix":"753"},{"desc":"752","fix":"754"},{"desc":"755","fix":"756"},{"desc":"752","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"755","fix":"762"},{"desc":"755","fix":"763"},{"desc":"758","fix":"764"},{"desc":"760","fix":"765"},{"desc":"760","fix":"766"},{"desc":"758","fix":"767"},{"desc":"755","fix":"768"},{"desc":"755","fix":"769"},{"desc":"758","fix":"770"},{"desc":"760","fix":"771"},{"desc":"755","fix":"772"},{"desc":"755","fix":"773"},{"desc":"755","fix":"774"},{"desc":"758","fix":"775"},{"desc":"760","fix":"776"},{"desc":"755","fix":"777"},{"desc":"755","fix":"778"},{"desc":"755","fix":"779"},{"desc":"752","fix":"780"},{"desc":"752","fix":"781"},{"desc":"752","fix":"782"},{"desc":"752","fix":"783"},{"desc":"752","fix":"784"},{"desc":"785","fix":"786"},{"desc":"758","fix":"787"},{"desc":"760","fix":"788"},{"desc":"758","fix":"789"},{"desc":"760","fix":"790"},{"desc":"752","fix":"791"},{"desc":"758","fix":"792"},{"desc":"760","fix":"793"},{"desc":"752","fix":"794"},{"desc":"752","fix":"795"},{"desc":"752","fix":"796"},{"desc":"758","fix":"797"},{"desc":"758","fix":"798"},{"desc":"760","fix":"799"},{"desc":"760","fix":"800"},{"desc":"758","fix":"801"},{"desc":"752","fix":"802"},{"desc":"752","fix":"803"},"Update the dependencies array to be: [dispatch, user.company_id]",{"range":"804","text":"805"},{"range":"806","text":"805"},"Update the dependencies array to be: [dispatch, user.branch_id, user.company_id]",{"range":"807","text":"808"},{"range":"809","text":"805"},"Update the dependencies array to be: [hideModalLoader]",{"range":"810","text":"811"},"Update the dependencies array to be: [detail, form, hideModalLoader]",{"range":"812","text":"813"},{"range":"814","text":"808"},{"range":"815","text":"808"},{"range":"816","text":"811"},{"range":"817","text":"813"},{"range":"818","text":"813"},{"range":"819","text":"811"},{"range":"820","text":"808"},{"range":"821","text":"808"},{"range":"822","text":"811"},{"range":"823","text":"813"},{"range":"824","text":"808"},{"range":"825","text":"808"},{"range":"826","text":"808"},{"range":"827","text":"811"},{"range":"828","text":"813"},{"range":"829","text":"808"},{"range":"830","text":"808"},{"range":"831","text":"808"},{"range":"832","text":"805"},{"range":"833","text":"805"},{"range":"834","text":"805"},{"range":"835","text":"805"},{"range":"836","text":"805"},"Update the dependencies array to be: [form, user]",{"range":"837","text":"838"},{"range":"839","text":"811"},{"range":"840","text":"813"},{"range":"841","text":"811"},{"range":"842","text":"813"},{"range":"843","text":"805"},{"range":"844","text":"811"},{"range":"845","text":"813"},{"range":"846","text":"805"},{"range":"847","text":"805"},{"range":"848","text":"805"},{"range":"849","text":"811"},{"range":"850","text":"811"},{"range":"851","text":"813"},{"range":"852","text":"813"},{"range":"853","text":"811"},{"range":"854","text":"805"},{"range":"855","text":"805"},[2312,2314],"[dispatch, user.company_id]",[2092,2094],[1396,1398],"[dispatch, user.branch_id, user.company_id]",[1513,1515],[547,549],"[hideModalLoader]",[872,880],"[detail, form, hideModalLoader]",[1330,1332],[1324,1326],[606,608],[802,810],[575,583],[445,447],[1454,1456],[1636,1638],[508,510],[734,742],[1486,1488],[1672,1674],[1856,1858],[522,524],[766,774],[1920,1922],[2111,2113],[2299,2301],[2417,2419],[1508,1510],[1690,1692],[1807,1809],[1922,1924],[730,736],"[form, user]",[485,487],[743,751],[459,461],[813,822],[1559,1561],[424,426],[682,690],[1542,1544],[1794,1796],[1915,1917],[411,413],[541,543],[713,721],[535,543],[570,572],[944,946],[462,464]]